{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"03823b6d1a15c0572d55f30500bdfd2bf9167a35","modified":1486289084000},{"_id":"source/favicon.ico","hash":"c4fe88e1eb9a21ca60301168c09654b3ee42c8a8","modified":1486289084000},{"_id":"source/_posts/.DS_Store","hash":"ceb573806827e33976ac6bbc00de6befa9f99f19","modified":1486289084000},{"_id":"source/_posts/Activity的四种启动模式.md","hash":"a619d947149800f20aa51b7025ff006ac60ade4d","modified":1486289084000},{"_id":"source/_posts/Hexo的基本用法.md","hash":"817ec9c06dd53f59dc8a9238674f3f87c67be72d","modified":1486289084000},{"_id":"source/_posts/Android广播机制.md","hash":"44e61a2426293dc76c3e4c465a7d9bddf8270b0e","modified":1486289084000},{"_id":"source/_posts/linux-clean.md","hash":"4cadc32f2fc6e5b9f25fdc4f50ea71cd120ad6ae","modified":1486289084000},{"_id":"source/_posts/RxJava与Retrofit结合的实践.md","hash":"1f40beaf4464a69f15ffcd0eb6819c1f9c2ec475","modified":1486289084000},{"_id":"source/_posts/lnmp.md","hash":"4642df682de7102c4aa8eb375ed3f1961112fb78","modified":1486289084000},{"_id":"source/_posts/ubuntu-lnmp.md","hash":"df3a4872a2391d6ac6878abcd27d92d9b1b08914","modified":1486289084000},{"_id":"source/_posts/持久化技术.md","hash":"d1a175540561047f664c75537425041764c92486","modified":1486289084000},{"_id":"source/categories/index.md","hash":"748d85daf260d9b351c0d0566af5bfd25dbf9f3d","modified":1486289084000},{"_id":"source/message/index-1.md","hash":"7320c97de8c3f080a13f670ffa7a9c1c8c3773e6","modified":1486289084000},{"_id":"source/message/index.md","hash":"606b825bcb2f1d5602a95bcb0b3ae178982d3cb9","modified":1486289084000},{"_id":"source/tags/index.md","hash":"de4e08c93dde292105bd7bf8e974eb5761016c3e","modified":1486289084000},{"_id":"public/baidusitemap.xml","hash":"68404d9e9c150df639c92e046c75037b2396d194","modified":1504276733349},{"_id":"public/search.xml","hash":"8610a1fc47b5def5975f9b6b3ff0dd279e20c6e9","modified":1504276733349},{"_id":"public/sitemap.xml","hash":"a1d0605f1c35f0e2c984b40cf51fceb5dad9d497","modified":1504276733349},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/message/index-1.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/message/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/02/06/linux-clean/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/02/05/lnmp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/02/05/ubuntu-lnmp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/02/03/RxJava与Retrofit结合的实践/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/01/16/持久化技术/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/01/16/Android广播机制/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/01/14/Hexo的基本用法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/2017/01/13/Activity的四种启动模式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/categories/Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733357},{"_id":"public/categories/Hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/categories/linux/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/categories/RxJava/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/categories/RxJava/Retrofit/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/archives/2017/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/archives/2017/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/Activity/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/启动模式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/Hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/广播机制/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/动态监听/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/linux/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/ubuntu/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/RxJava/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733358},{"_id":"public/tags/Retrofit/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733359},{"_id":"public/tags/lnmp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733361},{"_id":"public/tags/php/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733361},{"_id":"public/tags/lanmp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733361},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733362},{"_id":"public/tags/Sharedpreferences/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733362},{"_id":"public/tags/Sqlite/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733365},{"_id":"public/tags/LitePal/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504276733365},{"_id":"public/favicon.ico","hash":"c4fe88e1eb9a21ca60301168c09654b3ee42c8a8","modified":1504276733366}],"Category":[{"name":"Android","_id":"cj71zizo40002jedz3j2nhuar"},{"name":"Hexo","_id":"cj71zizok0007jedz323akmqh"},{"name":"linux","_id":"cj71zizp2000gjedzpbyd7wyd"},{"name":"RxJava","_id":"cj71zizp4000ljedzu2be3tjq"},{"name":"Retrofit","parent":"cj71zizp4000ljedzu2be3tjq","_id":"cj71zizpc000xjedz0n5qtk5p"}],"Data":[],"Page":[{"title":"categories","type":"categories","comments":0,"date":"2017-01-13T08:37:41.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ncomments: false  \ndate: 2017-01-13 16:37:41\n\n---\n","updated":"2017-02-05T10:04:44.000Z","path":"categories/index.html","layout":"page","_id":"cj71zizpw001tjedzs32sq01b","content":"","excerpt":"","more":""},{"title":"message","date":"2017-01-13T09:11:15.000Z","_content":"","source":"message/index-1.md","raw":"---\ntitle: message\ndate: 2017-01-13 17:11:15\n---\n","updated":"2017-02-05T10:04:44.000Z","path":"message/index-1.html","comments":1,"layout":"page","_id":"cj71zizq1001ujedz6n3cba0j","content":"","excerpt":"","more":""},{"title":"message","date":"2017-01-13T08:42:27.000Z","_content":"","source":"message/index.md","raw":"---\ntitle: message\ndate: 2017-01-13 16:42:27\n---\n","updated":"2017-02-05T10:04:44.000Z","path":"message/index.html","comments":1,"layout":"page","_id":"cj71zizq2001vjedzzc059lv6","content":"","excerpt":"","more":""},{"title":"tags","type":"tags","date":"2017-01-13T08:37:51.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ndate: 2017-01-13 16:37:51\n---\n","updated":"2017-02-05T10:04:44.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj71zizq3001wjedzhqqoyuuh","content":"","excerpt":"","more":""}],"Post":[{"title":"Activity的四种启动模式","date":"2017-01-13T14:05:28.000Z","_content":"# Activity的四种启动模式\n## 1.Standard\nstandard是默认Activity的启动模式。standrad模式的Activity的无论是否已经存在在返回栈中，系统都会创建一个新的Activity。\n## 2.SingleTop\n在singleTop模式下，已经存在在返回栈栈定中的Activity可以直接使用而无需重新创建。\n## 3.SingleTask\n使用singleTak可以很好的解决重复创建栈顶活动的问题。避免使用singTop模式是Activity不存在与返回栈栈顶时重复创建多个Activity实例的问题。当Activity启动模式指定为singleTask时，每次启动该Activity时系统都会在返回栈中检查是否存在该活动的实例，如果有则会直接使用，并把这个活动之上的活动统统出栈，如果没有怎会新建一个实例。\n## 4.SingleInstance\n实验该模式的activity会使用单独的返回栈（在我的三星s7 edge 7.0测试系统上出现了使用该模式的的activty和未使用该模式的的Activity使用同一个返回栈的问题)。\n","source":"_posts/Activity的四种启动模式.md","raw":"---\ntitle: Activity的四种启动模式\ndate: 2017-01-13 22:05:28\ncategories: Android  \ntags: [Android, Activity, 启动模式]\n\n---\n# Activity的四种启动模式\n## 1.Standard\nstandard是默认Activity的启动模式。standrad模式的Activity的无论是否已经存在在返回栈中，系统都会创建一个新的Activity。\n## 2.SingleTop\n在singleTop模式下，已经存在在返回栈栈定中的Activity可以直接使用而无需重新创建。\n## 3.SingleTask\n使用singleTak可以很好的解决重复创建栈顶活动的问题。避免使用singTop模式是Activity不存在与返回栈栈顶时重复创建多个Activity实例的问题。当Activity启动模式指定为singleTask时，每次启动该Activity时系统都会在返回栈中检查是否存在该活动的实例，如果有则会直接使用，并把这个活动之上的活动统统出栈，如果没有怎会新建一个实例。\n## 4.SingleInstance\n实验该模式的activity会使用单独的返回栈（在我的三星s7 edge 7.0测试系统上出现了使用该模式的的activty和未使用该模式的的Activity使用同一个返回栈的问题)。\n","slug":"Activity的四种启动模式","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71ziznp0000jedz535xor2d","content":"<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><h2 id=\"1-Standard\"><a href=\"#1-Standard\" class=\"headerlink\" title=\"1.Standard\"></a>1.Standard</h2><p>standard是默认Activity的启动模式。standrad模式的Activity的无论是否已经存在在返回栈中，系统都会创建一个新的Activity。</p>\n<h2 id=\"2-SingleTop\"><a href=\"#2-SingleTop\" class=\"headerlink\" title=\"2.SingleTop\"></a>2.SingleTop</h2><p>在singleTop模式下，已经存在在返回栈栈定中的Activity可以直接使用而无需重新创建。</p>\n<h2 id=\"3-SingleTask\"><a href=\"#3-SingleTask\" class=\"headerlink\" title=\"3.SingleTask\"></a>3.SingleTask</h2><p>使用singleTak可以很好的解决重复创建栈顶活动的问题。避免使用singTop模式是Activity不存在与返回栈栈顶时重复创建多个Activity实例的问题。当Activity启动模式指定为singleTask时，每次启动该Activity时系统都会在返回栈中检查是否存在该活动的实例，如果有则会直接使用，并把这个活动之上的活动统统出栈，如果没有怎会新建一个实例。</p>\n<h2 id=\"4-SingleInstance\"><a href=\"#4-SingleInstance\" class=\"headerlink\" title=\"4.SingleInstance\"></a>4.SingleInstance</h2><p>实验该模式的activity会使用单独的返回栈（在我的三星s7 edge 7.0测试系统上出现了使用该模式的的activty和未使用该模式的的Activity使用同一个返回栈的问题)。</p>\n","excerpt":"","more":"<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><h2 id=\"1-Standard\"><a href=\"#1-Standard\" class=\"headerlink\" title=\"1.Standard\"></a>1.Standard</h2><p>standard是默认Activity的启动模式。standrad模式的Activity的无论是否已经存在在返回栈中，系统都会创建一个新的Activity。</p>\n<h2 id=\"2-SingleTop\"><a href=\"#2-SingleTop\" class=\"headerlink\" title=\"2.SingleTop\"></a>2.SingleTop</h2><p>在singleTop模式下，已经存在在返回栈栈定中的Activity可以直接使用而无需重新创建。</p>\n<h2 id=\"3-SingleTask\"><a href=\"#3-SingleTask\" class=\"headerlink\" title=\"3.SingleTask\"></a>3.SingleTask</h2><p>使用singleTak可以很好的解决重复创建栈顶活动的问题。避免使用singTop模式是Activity不存在与返回栈栈顶时重复创建多个Activity实例的问题。当Activity启动模式指定为singleTask时，每次启动该Activity时系统都会在返回栈中检查是否存在该活动的实例，如果有则会直接使用，并把这个活动之上的活动统统出栈，如果没有怎会新建一个实例。</p>\n<h2 id=\"4-SingleInstance\"><a href=\"#4-SingleInstance\" class=\"headerlink\" title=\"4.SingleInstance\"></a>4.SingleInstance</h2><p>实验该模式的activity会使用单独的返回栈（在我的三星s7 edge 7.0测试系统上出现了使用该模式的的activty和未使用该模式的的Activity使用同一个返回栈的问题)。</p>\n"},{"title":"Hexo的基本用法","date":"2017-01-14T13:42:56.000Z","_content":"\n# Hexo的基本用法\n## 基础\n最基础的，创建文件：hexo new [layout] “文件名”， 其中layout默认为post。\n## layout\nHexo提供了3中布局，分别是post、page和draft。路径对应的分别是_post和_page还有_draft。\n\n## 文件名\nHexo会默认使用文章的标题作文文件名，可以编辑_config.yml文件来修改默认的文件名\n\n### 其他\n- title 文章标题\n- year 创建年份\n- month 月份，如4月为04\n- day 日期\n- i_month 月份，单数字，比如4月就是4\n- i_day 同上\n\n## Drafts\n在drafts目录下的文档会视为草稿，不会发布到网站上。可以通过hexo publish [layout] \"文件名\" 来发布位于该目录的草稿。也可以通过修改_config.yml文件来使该目录下的文章也可以默认发布。\n\n## Scaffolds模版\n当你使用new命令创建一篇文章的时候，Hexo会根据scaffolds目录中的模版帮你生成文章。假如执行hexo new photo \"My Gallery\"，Hexo会尝试在scaffolds目录中去寻找photo.md的模版文件，然后基于它创建标题为My Gallery的文章。\n\n# 前置声明\n文章开头title、data、categroise、tags等一部分内容。这一部分有两种书写方式\n- [YAML](http://baike.baidu.com/link?url=a2b9mgj0dYJO0wNYGDX5LVBGZ00QUZpzpbyiJ0dSKm_xuicUfvX6lRUpwgWw7kTAhENjlQhJJGrpZDl3BHIj8_)方式，三短线结束。\n- [JSON](http://baike.baidu.com/link?url=Isxbt-o3vGV0KGGsQuZpzR7JXOTcelfSwnFB_xSpB_75Fv-eF5YAlsJm81dbJspHUIELJ2wrWyplvhz_mbYTn_)方式，三分号结束。\n## 前置声明预置的参数\n\n| 名称        | 说明    |  \n| --------   | -----:   |\n| layout        | 布局，一般使用默认值。详见Hxeo基本用法->基础|   \n| title        |标题      |   \n| date        | 时间      |   \n| updated        | 更新时间      |   \n| comments        | 是否开启评论，默认为true      |   \n| tags        | 文章标签      |   \n| categories        | 文章分类      |   \n| permalink        | 文章永久链接，一般不用写，默认就行      |   \n# 标签插件\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件\n## 引用块\n在文章中插入引言，可包含作者、来源和标题。\n\n别号： quote\n\n样例：\n\n```\n\n{% blockquote David Levithan, Wide Awake %}\n\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n\n{% endblockquote %}\n\n```\n显示效果\n\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n{% youtube video_id %}\n","source":"_posts/Hexo的基本用法.md","raw":"---\ntitle: Hexo的基本用法\ndate: 2017-01-14 21:42:56\ncategories: Hexo  \ntags: [Hexo]\n---\n\n# Hexo的基本用法\n## 基础\n最基础的，创建文件：hexo new [layout] “文件名”， 其中layout默认为post。\n## layout\nHexo提供了3中布局，分别是post、page和draft。路径对应的分别是_post和_page还有_draft。\n\n## 文件名\nHexo会默认使用文章的标题作文文件名，可以编辑_config.yml文件来修改默认的文件名\n\n### 其他\n- title 文章标题\n- year 创建年份\n- month 月份，如4月为04\n- day 日期\n- i_month 月份，单数字，比如4月就是4\n- i_day 同上\n\n## Drafts\n在drafts目录下的文档会视为草稿，不会发布到网站上。可以通过hexo publish [layout] \"文件名\" 来发布位于该目录的草稿。也可以通过修改_config.yml文件来使该目录下的文章也可以默认发布。\n\n## Scaffolds模版\n当你使用new命令创建一篇文章的时候，Hexo会根据scaffolds目录中的模版帮你生成文章。假如执行hexo new photo \"My Gallery\"，Hexo会尝试在scaffolds目录中去寻找photo.md的模版文件，然后基于它创建标题为My Gallery的文章。\n\n# 前置声明\n文章开头title、data、categroise、tags等一部分内容。这一部分有两种书写方式\n- [YAML](http://baike.baidu.com/link?url=a2b9mgj0dYJO0wNYGDX5LVBGZ00QUZpzpbyiJ0dSKm_xuicUfvX6lRUpwgWw7kTAhENjlQhJJGrpZDl3BHIj8_)方式，三短线结束。\n- [JSON](http://baike.baidu.com/link?url=Isxbt-o3vGV0KGGsQuZpzR7JXOTcelfSwnFB_xSpB_75Fv-eF5YAlsJm81dbJspHUIELJ2wrWyplvhz_mbYTn_)方式，三分号结束。\n## 前置声明预置的参数\n\n| 名称        | 说明    |  \n| --------   | -----:   |\n| layout        | 布局，一般使用默认值。详见Hxeo基本用法->基础|   \n| title        |标题      |   \n| date        | 时间      |   \n| updated        | 更新时间      |   \n| comments        | 是否开启评论，默认为true      |   \n| tags        | 文章标签      |   \n| categories        | 文章分类      |   \n| permalink        | 文章永久链接，一般不用写，默认就行      |   \n# 标签插件\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件\n## 引用块\n在文章中插入引言，可包含作者、来源和标题。\n\n别号： quote\n\n样例：\n\n```\n\n{% blockquote David Levithan, Wide Awake %}\n\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n\n{% endblockquote %}\n\n```\n显示效果\n\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n{% youtube video_id %}\n","slug":"Hexo的基本用法","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71ziznu0001jedzbdiqyu96","content":"<h1 id=\"Hexo的基本用法\"><a href=\"#Hexo的基本用法\" class=\"headerlink\" title=\"Hexo的基本用法\"></a>Hexo的基本用法</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>最基础的，创建文件：hexo new [layout] “文件名”， 其中layout默认为post。</p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>Hexo提供了3中布局，分别是post、page和draft。路径对应的分别是_post和_page还有_draft。</p>\n<h2 id=\"文件名\"><a href=\"#文件名\" class=\"headerlink\" title=\"文件名\"></a>文件名</h2><p>Hexo会默认使用文章的标题作文文件名，可以编辑_config.yml文件来修改默认的文件名</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>title 文章标题</li>\n<li>year 创建年份</li>\n<li>month 月份，如4月为04</li>\n<li>day 日期</li>\n<li>i_month 月份，单数字，比如4月就是4</li>\n<li>i_day 同上</li>\n</ul>\n<h2 id=\"Drafts\"><a href=\"#Drafts\" class=\"headerlink\" title=\"Drafts\"></a>Drafts</h2><p>在drafts目录下的文档会视为草稿，不会发布到网站上。可以通过hexo publish [layout] “文件名” 来发布位于该目录的草稿。也可以通过修改_config.yml文件来使该目录下的文章也可以默认发布。</p>\n<h2 id=\"Scaffolds模版\"><a href=\"#Scaffolds模版\" class=\"headerlink\" title=\"Scaffolds模版\"></a>Scaffolds模版</h2><p>当你使用new命令创建一篇文章的时候，Hexo会根据scaffolds目录中的模版帮你生成文章。假如执行hexo new photo “My Gallery”，Hexo会尝试在scaffolds目录中去寻找photo.md的模版文件，然后基于它创建标题为My Gallery的文章。</p>\n<h1 id=\"前置声明\"><a href=\"#前置声明\" class=\"headerlink\" title=\"前置声明\"></a>前置声明</h1><p>文章开头title、data、categroise、tags等一部分内容。这一部分有两种书写方式</p>\n<ul>\n<li><a href=\"http://baike.baidu.com/link?url=a2b9mgj0dYJO0wNYGDX5LVBGZ00QUZpzpbyiJ0dSKm_xuicUfvX6lRUpwgWw7kTAhENjlQhJJGrpZDl3BHIj8_\" target=\"_blank\" rel=\"external\">YAML</a>方式，三短线结束。</li>\n<li><a href=\"http://baike.baidu.com/link?url=Isxbt-o3vGV0KGGsQuZpzR7JXOTcelfSwnFB_xSpB_75Fv-eF5YAlsJm81dbJspHUIELJ2wrWyplvhz_mbYTn_\" target=\"_blank\" rel=\"external\">JSON</a>方式，三分号结束。<h2 id=\"前置声明预置的参数\"><a href=\"#前置声明预置的参数\" class=\"headerlink\" title=\"前置声明预置的参数\"></a>前置声明预置的参数</h2></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td style=\"text-align:right\">布局，一般使用默认值。详见Hxeo基本用法-&gt;基础</td>\n</tr>\n<tr>\n<td>title</td>\n<td style=\"text-align:right\">标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td style=\"text-align:right\">时间</td>\n</tr>\n<tr>\n<td>updated</td>\n<td style=\"text-align:right\">更新时间</td>\n</tr>\n<tr>\n<td>comments</td>\n<td style=\"text-align:right\">是否开启评论，默认为true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td style=\"text-align:right\">文章标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td style=\"text-align:right\">文章分类</td>\n</tr>\n<tr>\n<td>permalink</td>\n<td style=\"text-align:right\">文章永久链接，一般不用写，默认就行</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"标签插件\"><a href=\"#标签插件\" class=\"headerlink\" title=\"标签插件\"></a>标签插件</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件</p>\n<h2 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p>\n<p>别号： quote</p>\n<p>样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class=\"line\"></div><div class=\"line\">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</div><div class=\"line\"></div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<p>显示效果</p>\n<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n","excerpt":"","more":"<h1 id=\"Hexo的基本用法\"><a href=\"#Hexo的基本用法\" class=\"headerlink\" title=\"Hexo的基本用法\"></a>Hexo的基本用法</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>最基础的，创建文件：hexo new [layout] “文件名”， 其中layout默认为post。</p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>Hexo提供了3中布局，分别是post、page和draft。路径对应的分别是_post和_page还有_draft。</p>\n<h2 id=\"文件名\"><a href=\"#文件名\" class=\"headerlink\" title=\"文件名\"></a>文件名</h2><p>Hexo会默认使用文章的标题作文文件名，可以编辑_config.yml文件来修改默认的文件名</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>title 文章标题</li>\n<li>year 创建年份</li>\n<li>month 月份，如4月为04</li>\n<li>day 日期</li>\n<li>i_month 月份，单数字，比如4月就是4</li>\n<li>i_day 同上</li>\n</ul>\n<h2 id=\"Drafts\"><a href=\"#Drafts\" class=\"headerlink\" title=\"Drafts\"></a>Drafts</h2><p>在drafts目录下的文档会视为草稿，不会发布到网站上。可以通过hexo publish [layout] “文件名” 来发布位于该目录的草稿。也可以通过修改_config.yml文件来使该目录下的文章也可以默认发布。</p>\n<h2 id=\"Scaffolds模版\"><a href=\"#Scaffolds模版\" class=\"headerlink\" title=\"Scaffolds模版\"></a>Scaffolds模版</h2><p>当你使用new命令创建一篇文章的时候，Hexo会根据scaffolds目录中的模版帮你生成文章。假如执行hexo new photo “My Gallery”，Hexo会尝试在scaffolds目录中去寻找photo.md的模版文件，然后基于它创建标题为My Gallery的文章。</p>\n<h1 id=\"前置声明\"><a href=\"#前置声明\" class=\"headerlink\" title=\"前置声明\"></a>前置声明</h1><p>文章开头title、data、categroise、tags等一部分内容。这一部分有两种书写方式</p>\n<ul>\n<li><a href=\"http://baike.baidu.com/link?url=a2b9mgj0dYJO0wNYGDX5LVBGZ00QUZpzpbyiJ0dSKm_xuicUfvX6lRUpwgWw7kTAhENjlQhJJGrpZDl3BHIj8_\">YAML</a>方式，三短线结束。</li>\n<li><a href=\"http://baike.baidu.com/link?url=Isxbt-o3vGV0KGGsQuZpzR7JXOTcelfSwnFB_xSpB_75Fv-eF5YAlsJm81dbJspHUIELJ2wrWyplvhz_mbYTn_\">JSON</a>方式，三分号结束。<h2 id=\"前置声明预置的参数\"><a href=\"#前置声明预置的参数\" class=\"headerlink\" title=\"前置声明预置的参数\"></a>前置声明预置的参数</h2></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td style=\"text-align:right\">布局，一般使用默认值。详见Hxeo基本用法-&gt;基础</td>\n</tr>\n<tr>\n<td>title</td>\n<td style=\"text-align:right\">标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td style=\"text-align:right\">时间</td>\n</tr>\n<tr>\n<td>updated</td>\n<td style=\"text-align:right\">更新时间</td>\n</tr>\n<tr>\n<td>comments</td>\n<td style=\"text-align:right\">是否开启评论，默认为true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td style=\"text-align:right\">文章标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td style=\"text-align:right\">文章分类</td>\n</tr>\n<tr>\n<td>permalink</td>\n<td style=\"text-align:right\">文章永久链接，一般不用写，默认就行</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"标签插件\"><a href=\"#标签插件\" class=\"headerlink\" title=\"标签插件\"></a>标签插件</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件</p>\n<h2 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p>\n<p>别号： quote</p>\n<p>样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class=\"line\"></div><div class=\"line\">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</div><div class=\"line\"></div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<p>显示效果</p>\n<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n"},{"title":"Android广播机制","date":"2017-01-16T02:00:13.000Z","_content":"\n# 详解广播机制\nAndroid广播主要分为类型:标准广播和有序广播。\n- 标准广播\n\n标准广播是完全异步的，在广播发出后所有的广播接收器机会都会在同一时刻接收到广播，因此他们之间没有任何先后顺序。这种广播效率会比较高，但是这种广播也是无法被截取的。\n\n<img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器3],[发出一条广播]-^[广播接收器2],[发出一条广播]-^[广播接收器1]\">\n\n- 有序广播\n\n有序广播是一种同步执行的广播，在广播发出后，同一时刻只有一个广播接收器可以接收到这条广播。当这个广播接收器的逻辑执行完毕之后广播才会继续传递。此时的广播接收器是有先后顺序的，优先级越高的广播接收器就可以越先接收到广播消息。而且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法接收到该条广播了。\n\n<img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器1],[广播接收器1]-^[广播接收器2]\">\n\n# 接收系统广播\nAndroid内置了很多级别的广播，我们可以通过监听这些广播来得到各种系统信息。\n## 动态监听网路变化\n广播接收器可以自由的对自己感兴趣的广播进行注册，这样在该广播接收器就可以只接收自己感兴趣的广播，并在内部处理响应的逻辑。广播接收器的注册一般有两种方式，第一种是在代码中进行注册，这种方式称为动态注册，另一种是在Androidmanifest.xml文件中进行注册，这种注册方式称为静态注册。\n\n首先定义一个类并集成自BroadcastReceiver，然后实现其onReceive()方法。\n\n示例代码:\n```Java\nclass NetWorkChangedReceiver extends BroadcastReceiver{\n\n     @Override\n     public void onReceive(Context context, Intent intent) {\n         Log.d(\"NetWorkChangedReceiver\", \"网路状态改变了\");\n     }\n }\n```\n首先创建一个IntentFilter的实例并添加相应的action。然后创建一个NetWorkChangedReceiver实例并调用registerReceiver()方法动态注册。\n\n示例代码:\n```Java\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n        netWorkChangedReceiver=new NetWorkChangedReceiver();\n        registerReceiver(netWorkChangedReceiver,intentFilter);\n        \n```\n\n这样就实现了一个监听网络状态发生变化的广播接收器。\n\n最后不要忘记了动态注册的广播一定要取消注册才行，可以通过调用unregisterReceiver()方法实现。\n\n## 静态注册实现开机自动启动\n\n使用Android Studio自带模版创建一个BootCompleteReceiver，此时就可以在AndroidMainfest.xml文件中就可以看到这里面已经有Android Studio帮我们把BootCompleteReceiver注册好了。此时我们只需要在BootCompleteReceiver中添加如下代码就可以了\n示例代码:\n```xml\n      <intent-filter>\n          <action android:name=\"android.intent.action.BOOT_COMPLETED\"></action>\n      </intent-filter>\n```\n\n当然，最后仍然需要区BootCompleteReceiver的onReceive方法中去实现需要实现的具体逻辑。\n\n# 发送自定义广播\n## 发送标准广播\n\n使用静态方法注册广播，具体步骤和做开机广播是一样的。值得注意的是intent-filter中的action就应该是我们自己定义的action。\n\n示例代码：\n```Java\nIntent intent=new intent(\"com.ixiongyu.broadcasttest.MY_BROSTCAST\");\nsendBroadCast(intent);\n```\n因为是通过intent发送的，因此还可以通过intent携带其他参数传给广播接收器。\n\n## 发送有序广播\n广播是一种可以跨进程的通信方式。因此我们程序中发送的广播其他程序应该也是可以接收到的。\n\n示例代码:\n```Java\nIntent intent=new intent(\"com.ixiongyu.broadcasttest.MY_BROSTCAST\");\nsendOrderBroadCast(intent,null);\n```\n可以看到，发送有序广播只需要在之前的基础上修改一行代码。可以通过在AndroidMainfest文件中注册的相应recevier的intent-filter添加android:priority=\"100\",这里的100就表示优先级。\n\n示例代码:\n```xml\n<intent-filter android:priority=\"100\">\n              <action android:name=\"android.intent.action.BOOT_COMPLETED\"></action>\n</intent-filter>\n```\n在接收到了广播的广播接收器中可以通过abortBroadcast()将这条广播截断，这样后面的广播接收器就无法在接收到这条广播了。\n\n## 使用本地广播\n前面我们发出和接受的都是全局广播，即使说发出的广播可以被其他应用应用程序接收到，而且我们也可以接收到来自其他程序的广播。这样就会引起很多安全问题，那么有没有办法解决呢？答案是肯定的，那就是本地广播。使用这个机制的发出的广播只能在应用程序的内部传递，而且广播接收器也只能接收来自本应用程序发出的广播。\n\n本地广播的用法并不不复杂，主要就是使用了一个LocalBroatcastManger()对广播进行管理并提供发送广播和注册广播接收器的方法。\n具体实现时先通过LocalBroadcastManager的getInstance()方法得到他的一个实例。然后在注册广播接收器的时候调用LocalBroatcastManger的registerReceiver()方法，发送广播的时候调用的是LocalBroatcastManger的sendBroadCast()方法。\n\n示例代码:\n```Java\n        localBroadcastManager=LocalBroadcastManager.getInstance(this);\n        Intent intent=new Intent(\"com.ixiongyu.broadcast.LOACL_BROADCAST\");\n        localBroadcastManager.sendBroadcast(intent);\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"com.ixiongyu.broadcast.LOACL_BROADCAST\");\n        localReceiver=new LocalReceiver();\n        localBroadcastManager.registerReceiver(localReceiver,intentFilter);\n```\n\n## 本地广播的优势\n- 可以明确的直到正在发送的广播不会离开自己的程序，一次不用担心数据泄露。\n- 其他的程序无法将广播发送到我们程序的内部，因此不需要担心安全漏洞的隐患。\n- 本地广播比全局广播更高效。\n","source":"_posts/Android广播机制.md","raw":"---\ntitle: Android广播机制\ndate: 2017-01-16 10:00:13\ncategories: Android\ntags: [广播机制,动态监听]\n---\n\n# 详解广播机制\nAndroid广播主要分为类型:标准广播和有序广播。\n- 标准广播\n\n标准广播是完全异步的，在广播发出后所有的广播接收器机会都会在同一时刻接收到广播，因此他们之间没有任何先后顺序。这种广播效率会比较高，但是这种广播也是无法被截取的。\n\n<img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器3],[发出一条广播]-^[广播接收器2],[发出一条广播]-^[广播接收器1]\">\n\n- 有序广播\n\n有序广播是一种同步执行的广播，在广播发出后，同一时刻只有一个广播接收器可以接收到这条广播。当这个广播接收器的逻辑执行完毕之后广播才会继续传递。此时的广播接收器是有先后顺序的，优先级越高的广播接收器就可以越先接收到广播消息。而且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法接收到该条广播了。\n\n<img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器1],[广播接收器1]-^[广播接收器2]\">\n\n# 接收系统广播\nAndroid内置了很多级别的广播，我们可以通过监听这些广播来得到各种系统信息。\n## 动态监听网路变化\n广播接收器可以自由的对自己感兴趣的广播进行注册，这样在该广播接收器就可以只接收自己感兴趣的广播，并在内部处理响应的逻辑。广播接收器的注册一般有两种方式，第一种是在代码中进行注册，这种方式称为动态注册，另一种是在Androidmanifest.xml文件中进行注册，这种注册方式称为静态注册。\n\n首先定义一个类并集成自BroadcastReceiver，然后实现其onReceive()方法。\n\n示例代码:\n```Java\nclass NetWorkChangedReceiver extends BroadcastReceiver{\n\n     @Override\n     public void onReceive(Context context, Intent intent) {\n         Log.d(\"NetWorkChangedReceiver\", \"网路状态改变了\");\n     }\n }\n```\n首先创建一个IntentFilter的实例并添加相应的action。然后创建一个NetWorkChangedReceiver实例并调用registerReceiver()方法动态注册。\n\n示例代码:\n```Java\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n        netWorkChangedReceiver=new NetWorkChangedReceiver();\n        registerReceiver(netWorkChangedReceiver,intentFilter);\n        \n```\n\n这样就实现了一个监听网络状态发生变化的广播接收器。\n\n最后不要忘记了动态注册的广播一定要取消注册才行，可以通过调用unregisterReceiver()方法实现。\n\n## 静态注册实现开机自动启动\n\n使用Android Studio自带模版创建一个BootCompleteReceiver，此时就可以在AndroidMainfest.xml文件中就可以看到这里面已经有Android Studio帮我们把BootCompleteReceiver注册好了。此时我们只需要在BootCompleteReceiver中添加如下代码就可以了\n示例代码:\n```xml\n      <intent-filter>\n          <action android:name=\"android.intent.action.BOOT_COMPLETED\"></action>\n      </intent-filter>\n```\n\n当然，最后仍然需要区BootCompleteReceiver的onReceive方法中去实现需要实现的具体逻辑。\n\n# 发送自定义广播\n## 发送标准广播\n\n使用静态方法注册广播，具体步骤和做开机广播是一样的。值得注意的是intent-filter中的action就应该是我们自己定义的action。\n\n示例代码：\n```Java\nIntent intent=new intent(\"com.ixiongyu.broadcasttest.MY_BROSTCAST\");\nsendBroadCast(intent);\n```\n因为是通过intent发送的，因此还可以通过intent携带其他参数传给广播接收器。\n\n## 发送有序广播\n广播是一种可以跨进程的通信方式。因此我们程序中发送的广播其他程序应该也是可以接收到的。\n\n示例代码:\n```Java\nIntent intent=new intent(\"com.ixiongyu.broadcasttest.MY_BROSTCAST\");\nsendOrderBroadCast(intent,null);\n```\n可以看到，发送有序广播只需要在之前的基础上修改一行代码。可以通过在AndroidMainfest文件中注册的相应recevier的intent-filter添加android:priority=\"100\",这里的100就表示优先级。\n\n示例代码:\n```xml\n<intent-filter android:priority=\"100\">\n              <action android:name=\"android.intent.action.BOOT_COMPLETED\"></action>\n</intent-filter>\n```\n在接收到了广播的广播接收器中可以通过abortBroadcast()将这条广播截断，这样后面的广播接收器就无法在接收到这条广播了。\n\n## 使用本地广播\n前面我们发出和接受的都是全局广播，即使说发出的广播可以被其他应用应用程序接收到，而且我们也可以接收到来自其他程序的广播。这样就会引起很多安全问题，那么有没有办法解决呢？答案是肯定的，那就是本地广播。使用这个机制的发出的广播只能在应用程序的内部传递，而且广播接收器也只能接收来自本应用程序发出的广播。\n\n本地广播的用法并不不复杂，主要就是使用了一个LocalBroatcastManger()对广播进行管理并提供发送广播和注册广播接收器的方法。\n具体实现时先通过LocalBroadcastManager的getInstance()方法得到他的一个实例。然后在注册广播接收器的时候调用LocalBroatcastManger的registerReceiver()方法，发送广播的时候调用的是LocalBroatcastManger的sendBroadCast()方法。\n\n示例代码:\n```Java\n        localBroadcastManager=LocalBroadcastManager.getInstance(this);\n        Intent intent=new Intent(\"com.ixiongyu.broadcast.LOACL_BROADCAST\");\n        localBroadcastManager.sendBroadcast(intent);\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"com.ixiongyu.broadcast.LOACL_BROADCAST\");\n        localReceiver=new LocalReceiver();\n        localBroadcastManager.registerReceiver(localReceiver,intentFilter);\n```\n\n## 本地广播的优势\n- 可以明确的直到正在发送的广播不会离开自己的程序，一次不用担心数据泄露。\n- 其他的程序无法将广播发送到我们程序的内部，因此不需要担心安全漏洞的隐患。\n- 本地广播比全局广播更高效。\n","slug":"Android广播机制","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizo70004jedz1es5x32j","content":"<h1 id=\"详解广播机制\"><a href=\"#详解广播机制\" class=\"headerlink\" title=\"详解广播机制\"></a>详解广播机制</h1><p>Android广播主要分为类型:标准广播和有序广播。</p>\n<ul>\n<li>标准广播</li>\n</ul>\n<p>标准广播是完全异步的，在广播发出后所有的广播接收器机会都会在同一时刻接收到广播，因此他们之间没有任何先后顺序。这种广播效率会比较高，但是这种广播也是无法被截取的。</p>\n<p><img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器3],[发出一条广播]-^[广播接收器2],[发出一条广播]-^[广播接收器1]\"></p>\n<ul>\n<li>有序广播</li>\n</ul>\n<p>有序广播是一种同步执行的广播，在广播发出后，同一时刻只有一个广播接收器可以接收到这条广播。当这个广播接收器的逻辑执行完毕之后广播才会继续传递。此时的广播接收器是有先后顺序的，优先级越高的广播接收器就可以越先接收到广播消息。而且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法接收到该条广播了。</p>\n<p><img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器1],[广播接收器1]-^[广播接收器2]\"></p>\n<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><p>Android内置了很多级别的广播，我们可以通过监听这些广播来得到各种系统信息。</p>\n<h2 id=\"动态监听网路变化\"><a href=\"#动态监听网路变化\" class=\"headerlink\" title=\"动态监听网路变化\"></a>动态监听网路变化</h2><p>广播接收器可以自由的对自己感兴趣的广播进行注册，这样在该广播接收器就可以只接收自己感兴趣的广播，并在内部处理响应的逻辑。广播接收器的注册一般有两种方式，第一种是在代码中进行注册，这种方式称为动态注册，另一种是在Androidmanifest.xml文件中进行注册，这种注册方式称为静态注册。</p>\n<p>首先定义一个类并集成自BroadcastReceiver，然后实现其onReceive()方法。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetWorkChangedReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">         Log.d(<span class=\"string\">\"NetWorkChangedReceiver\"</span>, <span class=\"string\">\"网路状态改变了\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>首先创建一个IntentFilter的实例并添加相应的action。然后创建一个NetWorkChangedReceiver实例并调用registerReceiver()方法动态注册。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">intentFilter=<span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">intentFilter.addAction(<span class=\"string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>);</div><div class=\"line\">netWorkChangedReceiver=<span class=\"keyword\">new</span> NetWorkChangedReceiver();</div><div class=\"line\">registerReceiver(netWorkChangedReceiver,intentFilter);</div></pre></td></tr></table></figure></p>\n<p>这样就实现了一个监听网络状态发生变化的广播接收器。</p>\n<p>最后不要忘记了动态注册的广播一定要取消注册才行，可以通过调用unregisterReceiver()方法实现。</p>\n<h2 id=\"静态注册实现开机自动启动\"><a href=\"#静态注册实现开机自动启动\" class=\"headerlink\" title=\"静态注册实现开机自动启动\"></a>静态注册实现开机自动启动</h2><p>使用Android Studio自带模版创建一个BootCompleteReceiver，此时就可以在AndroidMainfest.xml文件中就可以看到这里面已经有Android Studio帮我们把BootCompleteReceiver注册好了。此时我们只需要在BootCompleteReceiver中添加如下代码就可以了<br>示例代码:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当然，最后仍然需要区BootCompleteReceiver的onReceive方法中去实现需要实现的具体逻辑。</p>\n<h1 id=\"发送自定义广播\"><a href=\"#发送自定义广播\" class=\"headerlink\" title=\"发送自定义广播\"></a>发送自定义广播</h1><h2 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h2><p>使用静态方法注册广播，具体步骤和做开机广播是一样的。值得注意的是intent-filter中的action就应该是我们自己定义的action。</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> intent(<span class=\"string\">\"com.ixiongyu.broadcasttest.MY_BROSTCAST\"</span>);</div><div class=\"line\">sendBroadCast(intent);</div></pre></td></tr></table></figure></p>\n<p>因为是通过intent发送的，因此还可以通过intent携带其他参数传给广播接收器。</p>\n<h2 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h2><p>广播是一种可以跨进程的通信方式。因此我们程序中发送的广播其他程序应该也是可以接收到的。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> intent(<span class=\"string\">\"com.ixiongyu.broadcasttest.MY_BROSTCAST\"</span>);</div><div class=\"line\">sendOrderBroadCast(intent,<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure></p>\n<p>可以看到，发送有序广播只需要在之前的基础上修改一行代码。可以通过在AndroidMainfest文件中注册的相应recevier的intent-filter添加android:priority=”100”,这里的100就表示优先级。</p>\n<p>示例代码:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span> <span class=\"attr\">android:priority</span>=<span class=\"string\">\"100\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在接收到了广播的广播接收器中可以通过abortBroadcast()将这条广播截断，这样后面的广播接收器就无法在接收到这条广播了。</p>\n<h2 id=\"使用本地广播\"><a href=\"#使用本地广播\" class=\"headerlink\" title=\"使用本地广播\"></a>使用本地广播</h2><p>前面我们发出和接受的都是全局广播，即使说发出的广播可以被其他应用应用程序接收到，而且我们也可以接收到来自其他程序的广播。这样就会引起很多安全问题，那么有没有办法解决呢？答案是肯定的，那就是本地广播。使用这个机制的发出的广播只能在应用程序的内部传递，而且广播接收器也只能接收来自本应用程序发出的广播。</p>\n<p>本地广播的用法并不不复杂，主要就是使用了一个LocalBroatcastManger()对广播进行管理并提供发送广播和注册广播接收器的方法。<br>具体实现时先通过LocalBroadcastManager的getInstance()方法得到他的一个实例。然后在注册广播接收器的时候调用LocalBroatcastManger的registerReceiver()方法，发送广播的时候调用的是LocalBroatcastManger的sendBroadCast()方法。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">localBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.ixiongyu.broadcast.LOACL_BROADCAST\"</span>);</div><div class=\"line\">localBroadcastManager.sendBroadcast(intent);</div><div class=\"line\">intentFilter=<span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">intentFilter.addAction(<span class=\"string\">\"com.ixiongyu.broadcast.LOACL_BROADCAST\"</span>);</div><div class=\"line\">localReceiver=<span class=\"keyword\">new</span> LocalReceiver();</div><div class=\"line\">localBroadcastManager.registerReceiver(localReceiver,intentFilter);</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地广播的优势\"><a href=\"#本地广播的优势\" class=\"headerlink\" title=\"本地广播的优势\"></a>本地广播的优势</h2><ul>\n<li>可以明确的直到正在发送的广播不会离开自己的程序，一次不用担心数据泄露。</li>\n<li>其他的程序无法将广播发送到我们程序的内部，因此不需要担心安全漏洞的隐患。</li>\n<li>本地广播比全局广播更高效。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"详解广播机制\"><a href=\"#详解广播机制\" class=\"headerlink\" title=\"详解广播机制\"></a>详解广播机制</h1><p>Android广播主要分为类型:标准广播和有序广播。</p>\n<ul>\n<li>标准广播</li>\n</ul>\n<p>标准广播是完全异步的，在广播发出后所有的广播接收器机会都会在同一时刻接收到广播，因此他们之间没有任何先后顺序。这种广播效率会比较高，但是这种广播也是无法被截取的。</p>\n<p><img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器3],[发出一条广播]-^[广播接收器2],[发出一条广播]-^[广播接收器1]\"></p>\n<ul>\n<li>有序广播</li>\n</ul>\n<p>有序广播是一种同步执行的广播，在广播发出后，同一时刻只有一个广播接收器可以接收到这条广播。当这个广播接收器的逻辑执行完毕之后广播才会继续传递。此时的广播接收器是有先后顺序的，优先级越高的广播接收器就可以越先接收到广播消息。而且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法接收到该条广播了。</p>\n<p><img src=\"https://yuml.me/diagram/scruffy/class/[发出一条广播]-^[广播接收器1],[广播接收器1]-^[广播接收器2]\"></p>\n<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><p>Android内置了很多级别的广播，我们可以通过监听这些广播来得到各种系统信息。</p>\n<h2 id=\"动态监听网路变化\"><a href=\"#动态监听网路变化\" class=\"headerlink\" title=\"动态监听网路变化\"></a>动态监听网路变化</h2><p>广播接收器可以自由的对自己感兴趣的广播进行注册，这样在该广播接收器就可以只接收自己感兴趣的广播，并在内部处理响应的逻辑。广播接收器的注册一般有两种方式，第一种是在代码中进行注册，这种方式称为动态注册，另一种是在Androidmanifest.xml文件中进行注册，这种注册方式称为静态注册。</p>\n<p>首先定义一个类并集成自BroadcastReceiver，然后实现其onReceive()方法。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetWorkChangedReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">         Log.d(<span class=\"string\">\"NetWorkChangedReceiver\"</span>, <span class=\"string\">\"网路状态改变了\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>首先创建一个IntentFilter的实例并添加相应的action。然后创建一个NetWorkChangedReceiver实例并调用registerReceiver()方法动态注册。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">intentFilter=<span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">intentFilter.addAction(<span class=\"string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>);</div><div class=\"line\">netWorkChangedReceiver=<span class=\"keyword\">new</span> NetWorkChangedReceiver();</div><div class=\"line\">registerReceiver(netWorkChangedReceiver,intentFilter);</div></pre></td></tr></table></figure></p>\n<p>这样就实现了一个监听网络状态发生变化的广播接收器。</p>\n<p>最后不要忘记了动态注册的广播一定要取消注册才行，可以通过调用unregisterReceiver()方法实现。</p>\n<h2 id=\"静态注册实现开机自动启动\"><a href=\"#静态注册实现开机自动启动\" class=\"headerlink\" title=\"静态注册实现开机自动启动\"></a>静态注册实现开机自动启动</h2><p>使用Android Studio自带模版创建一个BootCompleteReceiver，此时就可以在AndroidMainfest.xml文件中就可以看到这里面已经有Android Studio帮我们把BootCompleteReceiver注册好了。此时我们只需要在BootCompleteReceiver中添加如下代码就可以了<br>示例代码:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当然，最后仍然需要区BootCompleteReceiver的onReceive方法中去实现需要实现的具体逻辑。</p>\n<h1 id=\"发送自定义广播\"><a href=\"#发送自定义广播\" class=\"headerlink\" title=\"发送自定义广播\"></a>发送自定义广播</h1><h2 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h2><p>使用静态方法注册广播，具体步骤和做开机广播是一样的。值得注意的是intent-filter中的action就应该是我们自己定义的action。</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> intent(<span class=\"string\">\"com.ixiongyu.broadcasttest.MY_BROSTCAST\"</span>);</div><div class=\"line\">sendBroadCast(intent);</div></pre></td></tr></table></figure></p>\n<p>因为是通过intent发送的，因此还可以通过intent携带其他参数传给广播接收器。</p>\n<h2 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h2><p>广播是一种可以跨进程的通信方式。因此我们程序中发送的广播其他程序应该也是可以接收到的。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> intent(<span class=\"string\">\"com.ixiongyu.broadcasttest.MY_BROSTCAST\"</span>);</div><div class=\"line\">sendOrderBroadCast(intent,<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure></p>\n<p>可以看到，发送有序广播只需要在之前的基础上修改一行代码。可以通过在AndroidMainfest文件中注册的相应recevier的intent-filter添加android:priority=”100”,这里的100就表示优先级。</p>\n<p>示例代码:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span> <span class=\"attr\">android:priority</span>=<span class=\"string\">\"100\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在接收到了广播的广播接收器中可以通过abortBroadcast()将这条广播截断，这样后面的广播接收器就无法在接收到这条广播了。</p>\n<h2 id=\"使用本地广播\"><a href=\"#使用本地广播\" class=\"headerlink\" title=\"使用本地广播\"></a>使用本地广播</h2><p>前面我们发出和接受的都是全局广播，即使说发出的广播可以被其他应用应用程序接收到，而且我们也可以接收到来自其他程序的广播。这样就会引起很多安全问题，那么有没有办法解决呢？答案是肯定的，那就是本地广播。使用这个机制的发出的广播只能在应用程序的内部传递，而且广播接收器也只能接收来自本应用程序发出的广播。</p>\n<p>本地广播的用法并不不复杂，主要就是使用了一个LocalBroatcastManger()对广播进行管理并提供发送广播和注册广播接收器的方法。<br>具体实现时先通过LocalBroadcastManager的getInstance()方法得到他的一个实例。然后在注册广播接收器的时候调用LocalBroatcastManger的registerReceiver()方法，发送广播的时候调用的是LocalBroatcastManger的sendBroadCast()方法。</p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">localBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.ixiongyu.broadcast.LOACL_BROADCAST\"</span>);</div><div class=\"line\">localBroadcastManager.sendBroadcast(intent);</div><div class=\"line\">intentFilter=<span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">intentFilter.addAction(<span class=\"string\">\"com.ixiongyu.broadcast.LOACL_BROADCAST\"</span>);</div><div class=\"line\">localReceiver=<span class=\"keyword\">new</span> LocalReceiver();</div><div class=\"line\">localBroadcastManager.registerReceiver(localReceiver,intentFilter);</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地广播的优势\"><a href=\"#本地广播的优势\" class=\"headerlink\" title=\"本地广播的优势\"></a>本地广播的优势</h2><ul>\n<li>可以明确的直到正在发送的广播不会离开自己的程序，一次不用担心数据泄露。</li>\n<li>其他的程序无法将广播发送到我们程序的内部，因此不需要担心安全漏洞的隐患。</li>\n<li>本地广播比全局广播更高效。</li>\n</ul>\n"},{"title":"ubuntu 清理命令","date":"2017-02-06T01:25:04.000Z","_content":"# apt-get autoclean:\n    如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。\n\n# apt-get clean:\n    类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。\n\n# apt-get autoremove:\n    删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。\n\n# 其它：\napt-get remove 软件包名称：\n    删除已安装的软件包（保留配置文件）。\napt-get --purge remove 软件包名称：\n     删除已安装包（不保留配置文件)。\n","source":"_posts/linux-clean.md","raw":"---\ntitle: ubuntu 清理命令\ndate: 2017-02-06 09:25:04\ncategories: linux\ntags: [linux,ubuntu]\n---\n# apt-get autoclean:\n    如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。\n\n# apt-get clean:\n    类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。\n\n# apt-get autoremove:\n    删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。\n\n# 其它：\napt-get remove 软件包名称：\n    删除已安装的软件包（保留配置文件）。\napt-get --purge remove 软件包名称：\n     删除已安装包（不保留配置文件)。\n","slug":"linux-clean","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizoa0005jedzj2u28x7j","content":"<h1 id=\"apt-get-autoclean\"><a href=\"#apt-get-autoclean\" class=\"headerlink\" title=\"apt-get autoclean:\"></a>apt-get autoclean:</h1><pre><code>如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。\n</code></pre><h1 id=\"apt-get-clean\"><a href=\"#apt-get-clean\" class=\"headerlink\" title=\"apt-get clean:\"></a>apt-get clean:</h1><pre><code>类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。\n</code></pre><h1 id=\"apt-get-autoremove\"><a href=\"#apt-get-autoremove\" class=\"headerlink\" title=\"apt-get autoremove:\"></a>apt-get autoremove:</h1><pre><code>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。\n</code></pre><h1 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h1><p>apt-get remove 软件包名称：<br>    删除已安装的软件包（保留配置文件）。<br>apt-get –purge remove 软件包名称：<br>     删除已安装包（不保留配置文件)。</p>\n","excerpt":"","more":"<h1 id=\"apt-get-autoclean\"><a href=\"#apt-get-autoclean\" class=\"headerlink\" title=\"apt-get autoclean:\"></a>apt-get autoclean:</h1><pre><code>如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。\n</code></pre><h1 id=\"apt-get-clean\"><a href=\"#apt-get-clean\" class=\"headerlink\" title=\"apt-get clean:\"></a>apt-get clean:</h1><pre><code>类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。\n</code></pre><h1 id=\"apt-get-autoremove\"><a href=\"#apt-get-autoremove\" class=\"headerlink\" title=\"apt-get autoremove:\"></a>apt-get autoremove:</h1><pre><code>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。\n</code></pre><h1 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h1><p>apt-get remove 软件包名称：<br>    删除已安装的软件包（保留配置文件）。<br>apt-get –purge remove 软件包名称：<br>     删除已安装包（不保留配置文件)。</p>\n"},{"title":"RxJava与Retrofit结合的实践","date":"2017-02-03T02:58:33.000Z","_content":"# RxJava如何与Retrofit结合\n\n## 准备工作\n添加以下依赖\n```java\n   compile 'io.reactivex:rxandroid:+'\n   compile 'io.reactivex:rxjava:+'\n   compile 'com.squareup.retrofit2:retrofit:+'\n   compile 'com.squareup.retrofit2:converter-gson:+'\n   compile 'com.squareup.retrofit2:adapter-rxjava:+'\n   compile 'com.google.code.gson:gson:+'\n```\n## 只使用Retrofit\n使用豆瓣电影Top250作为测试接口，api地址：\nhttps://api.douban.com/v2/movie/top250?start=0&count=10\n\n### 封装Entity\n根据接口返回的json数据封装Entity\n\n### 创建访问数据的接口\n实例代码如下：\n```java\npublic interface MovieService {\n  @GET(\"top250\")\n  Call<MovieEntity> getTop250(@Query(\"start\") int start,@Query(\"count\") int count);\n\n}\n```\n### 请求\n示例代码：\n```Java\n/***\n    *  只使用Retrofit进行访问\n    * @param start 开始的位置\n    * @param count 每次获取多少条数据\n    */\n\n   private void RetrofitGetMovie(int start,int count)\n   {\n     String BaseUrl=\"https://api.douban.com/v2/movie/\"; //此处注意链接的结尾\n\n       Retrofit retrofit=new Retrofit.Builder()\n               .baseUrl(BaseUrl)\n               .addConverterFactory(GsonConverterFactory.create())\n               .build();\n       MovieService movieService=retrofit.create(MovieService.class);\n\n       Call<MovieEntity> repos=movieService.getTopMovie(start,count);\n       repos.enqueue(new Callback<MovieEntity>() {\n           @Override\n           public void onResponse(Call<MovieEntity> call, Response<MovieEntity> response) {\n               for (int i = 0; i < response.body().getSubjects().size(); i++) {\n                   Log.d(\"MainActivity\", response.body().getSubjects().get(i).getOriginal_title());\n               }\n           }\n           @Override\n           public void onFailure(Call<MovieEntity> call, Throwable t) {\n\n           }\n       });\n\n   }\n```\n 此处的repos.enqueue是使用异步请求。也可以使用repos.execute进行同步请求（值得注意的是这个方法不能直接放在主线程中，否则会有<font color=\"#ff0000\">NetworkOnMainThreadException</font>的异常）\n\n\n## 加入RxJava\n\n 创建Retrofit的过程变为：\n ```java\n Retrofit retrofit=new Retrofit.Builder()\n               .baseUrl(BaseUrl)\n               .addConverterFactory(GsonConverterFactory.create())\n               .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n               .build();\n ```\n\n修改MovieService\n```java\n\n@GET(\"top250\")\n   Observable<MovieEntity> RxJavaGetMovie(@Query(\"start\") int start, @Query(\"count\") int count);\n```\n\n完整请求代码：\n```java\n\nprivate void RxJavaRetrofitGetMovie(int start,int count)\n  {\n    String BaseUrl=\"https://api.douban.com/v2/movie/\";\n      Retrofit retrofit=new Retrofit.Builder()\n              .baseUrl(BaseUrl)\n              .addConverterFactory(GsonConverterFactory.create())\n              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n              .build();\n\n      MovieService movieService=retrofit.create(MovieService.class);\n      movieService.RxJavaGetMovie(start,count)\n             .subscribeOn(Schedulers.io())\n              .observeOn(AndroidSchedulers.mainThread())\n              .subscribe(new Subscriber<MovieEntity>() {\n                  @Override\n                  public void onCompleted() {\n\n                  }\n\n                  @Override\n                  public void onError(Throwable e) {\n\n                  }\n\n                  @Override\n                  public void onNext(MovieEntity movieEntity) {\n                      for (int i = 0; i < movieEntity.getSubjects().size(); i++) {\n                          Log.d(\"MainActivity\", movieEntity.getSubjects().get(i).getTitle());\n                      }\n                  }\n              });\n\n  }\n```\n\n## 封装请求过程\n\n创建一个HttpMethods\n\n\n## 遇到的问题\n- <font color=\"#ff0000\" >java.lang.IllegalArgumentException: Unable to create converter for class cn.shay.rxjavaretrofit.Entity.MovieEntity</font>\n\n<font color=\"#24ff00\">解决方案：</font>\n在Retrofit 1.9中，GsonConverter 包含在了package 中而且自动在RestAdapter创建的时候被初始化。这样来自服务器的son结果会自动解析成定义好了的Data Access Object（DAO）\n但是在Retrofit 2.0中，Converter 不再包含在package 中了。你需要自己插入一个Converter 不然的话Retrofit 只能接收字符串结果。同样的，Retrofit 2.0也不再依赖于Gson 。\n如果你想接收json 结果并解析成DAO，你必须把Gson Converter 作为一个独立的依赖添加进来,然后使用addConverterFactory把它添加进来。\n","source":"_posts/RxJava与Retrofit结合的实践.md","raw":"---\ntitle: RxJava与Retrofit结合的实践\ndate: 2017-02-03 10:58:33\ncategories: [RxJava,Retrofit]\ntags: [RxJava,Retrofit]\n---\n# RxJava如何与Retrofit结合\n\n## 准备工作\n添加以下依赖\n```java\n   compile 'io.reactivex:rxandroid:+'\n   compile 'io.reactivex:rxjava:+'\n   compile 'com.squareup.retrofit2:retrofit:+'\n   compile 'com.squareup.retrofit2:converter-gson:+'\n   compile 'com.squareup.retrofit2:adapter-rxjava:+'\n   compile 'com.google.code.gson:gson:+'\n```\n## 只使用Retrofit\n使用豆瓣电影Top250作为测试接口，api地址：\nhttps://api.douban.com/v2/movie/top250?start=0&count=10\n\n### 封装Entity\n根据接口返回的json数据封装Entity\n\n### 创建访问数据的接口\n实例代码如下：\n```java\npublic interface MovieService {\n  @GET(\"top250\")\n  Call<MovieEntity> getTop250(@Query(\"start\") int start,@Query(\"count\") int count);\n\n}\n```\n### 请求\n示例代码：\n```Java\n/***\n    *  只使用Retrofit进行访问\n    * @param start 开始的位置\n    * @param count 每次获取多少条数据\n    */\n\n   private void RetrofitGetMovie(int start,int count)\n   {\n     String BaseUrl=\"https://api.douban.com/v2/movie/\"; //此处注意链接的结尾\n\n       Retrofit retrofit=new Retrofit.Builder()\n               .baseUrl(BaseUrl)\n               .addConverterFactory(GsonConverterFactory.create())\n               .build();\n       MovieService movieService=retrofit.create(MovieService.class);\n\n       Call<MovieEntity> repos=movieService.getTopMovie(start,count);\n       repos.enqueue(new Callback<MovieEntity>() {\n           @Override\n           public void onResponse(Call<MovieEntity> call, Response<MovieEntity> response) {\n               for (int i = 0; i < response.body().getSubjects().size(); i++) {\n                   Log.d(\"MainActivity\", response.body().getSubjects().get(i).getOriginal_title());\n               }\n           }\n           @Override\n           public void onFailure(Call<MovieEntity> call, Throwable t) {\n\n           }\n       });\n\n   }\n```\n 此处的repos.enqueue是使用异步请求。也可以使用repos.execute进行同步请求（值得注意的是这个方法不能直接放在主线程中，否则会有<font color=\"#ff0000\">NetworkOnMainThreadException</font>的异常）\n\n\n## 加入RxJava\n\n 创建Retrofit的过程变为：\n ```java\n Retrofit retrofit=new Retrofit.Builder()\n               .baseUrl(BaseUrl)\n               .addConverterFactory(GsonConverterFactory.create())\n               .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n               .build();\n ```\n\n修改MovieService\n```java\n\n@GET(\"top250\")\n   Observable<MovieEntity> RxJavaGetMovie(@Query(\"start\") int start, @Query(\"count\") int count);\n```\n\n完整请求代码：\n```java\n\nprivate void RxJavaRetrofitGetMovie(int start,int count)\n  {\n    String BaseUrl=\"https://api.douban.com/v2/movie/\";\n      Retrofit retrofit=new Retrofit.Builder()\n              .baseUrl(BaseUrl)\n              .addConverterFactory(GsonConverterFactory.create())\n              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n              .build();\n\n      MovieService movieService=retrofit.create(MovieService.class);\n      movieService.RxJavaGetMovie(start,count)\n             .subscribeOn(Schedulers.io())\n              .observeOn(AndroidSchedulers.mainThread())\n              .subscribe(new Subscriber<MovieEntity>() {\n                  @Override\n                  public void onCompleted() {\n\n                  }\n\n                  @Override\n                  public void onError(Throwable e) {\n\n                  }\n\n                  @Override\n                  public void onNext(MovieEntity movieEntity) {\n                      for (int i = 0; i < movieEntity.getSubjects().size(); i++) {\n                          Log.d(\"MainActivity\", movieEntity.getSubjects().get(i).getTitle());\n                      }\n                  }\n              });\n\n  }\n```\n\n## 封装请求过程\n\n创建一个HttpMethods\n\n\n## 遇到的问题\n- <font color=\"#ff0000\" >java.lang.IllegalArgumentException: Unable to create converter for class cn.shay.rxjavaretrofit.Entity.MovieEntity</font>\n\n<font color=\"#24ff00\">解决方案：</font>\n在Retrofit 1.9中，GsonConverter 包含在了package 中而且自动在RestAdapter创建的时候被初始化。这样来自服务器的son结果会自动解析成定义好了的Data Access Object（DAO）\n但是在Retrofit 2.0中，Converter 不再包含在package 中了。你需要自己插入一个Converter 不然的话Retrofit 只能接收字符串结果。同样的，Retrofit 2.0也不再依赖于Gson 。\n如果你想接收json 结果并解析成DAO，你必须把Gson Converter 作为一个独立的依赖添加进来,然后使用addConverterFactory把它添加进来。\n","slug":"RxJava与Retrofit结合的实践","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizoi0006jedzwnusmhsu","content":"<h1 id=\"RxJava如何与Retrofit结合\"><a href=\"#RxJava如何与Retrofit结合\" class=\"headerlink\" title=\"RxJava如何与Retrofit结合\"></a>RxJava如何与Retrofit结合</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>添加以下依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxandroid:+'</span></div><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:retrofit:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:converter-gson:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:adapter-rxjava:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.google.code.gson:gson:+'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"只使用Retrofit\"><a href=\"#只使用Retrofit\" class=\"headerlink\" title=\"只使用Retrofit\"></a>只使用Retrofit</h2><p>使用豆瓣电影Top250作为测试接口，api地址：<br><a href=\"https://api.douban.com/v2/movie/top250?start=0&amp;count=10\" target=\"_blank\" rel=\"external\">https://api.douban.com/v2/movie/top250?start=0&amp;count=10</a></p>\n<h3 id=\"封装Entity\"><a href=\"#封装Entity\" class=\"headerlink\" title=\"封装Entity\"></a>封装Entity</h3><p>根据接口返回的json数据封装Entity</p>\n<h3 id=\"创建访问数据的接口\"><a href=\"#创建访问数据的接口\" class=\"headerlink\" title=\"创建访问数据的接口\"></a>创建访问数据的接口</h3><p>实例代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MovieService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</div><div class=\"line\">  <span class=\"function\">Call&lt;MovieEntity&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@Query(<span class=\"string\">\"start\"</span>)</span> <span class=\"keyword\">int</span> start,@<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"count\"</span>)</span> <span class=\"keyword\">int</span> count)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***</span></div><div class=\"line\">    *  只使用Retrofit进行访问</div><div class=\"line\">    * <span class=\"doctag\">@param</span> start 开始的位置</div><div class=\"line\">    * <span class=\"doctag\">@param</span> count 每次获取多少条数据</div><div class=\"line\">    */</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RetrofitGetMovie</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> count)</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">     String BaseUrl=<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>; <span class=\"comment\">//此处注意链接的结尾</span></div><div class=\"line\"></div><div class=\"line\">       Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">               .baseUrl(BaseUrl)</div><div class=\"line\">               .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">               .build();</div><div class=\"line\">       MovieService movieService=retrofit.create(MovieService.class);</div><div class=\"line\"></div><div class=\"line\">       Call&lt;MovieEntity&gt; repos=movieService.getTopMovie(start,count);</div><div class=\"line\">       repos.enqueue(<span class=\"keyword\">new</span> Callback&lt;MovieEntity&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;MovieEntity&gt; call, Response&lt;MovieEntity&gt; response)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; response.body().getSubjects().size(); i++) &#123;</div><div class=\"line\">                   Log.d(<span class=\"string\">\"MainActivity\"</span>, response.body().getSubjects().get(i).getOriginal_title());</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;MovieEntity&gt; call, Throwable t)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 此处的repos.enqueue是使用异步请求。也可以使用repos.execute进行同步请求（值得注意的是这个方法不能直接放在主线程中，否则会有<font color=\"#ff0000\">NetworkOnMainThreadException</font>的异常）</p>\n<h2 id=\"加入RxJava\"><a href=\"#加入RxJava\" class=\"headerlink\" title=\"加入RxJava\"></a>加入RxJava</h2><p> 创建Retrofit的过程变为：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">              .baseUrl(BaseUrl)</div><div class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">              .build();</div></pre></td></tr></table></figure></p>\n<p>修改MovieService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</div><div class=\"line\">   <span class=\"function\">Observable&lt;MovieEntity&gt; <span class=\"title\">RxJavaGetMovie</span><span class=\"params\">(@Query(<span class=\"string\">\"start\"</span>)</span> <span class=\"keyword\">int</span> start, @<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"count\"</span>)</span> <span class=\"keyword\">int</span> count)</span>;</div></pre></td></tr></table></figure></p>\n<p>完整请求代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RxJavaRetrofitGetMovie</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> count)</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    String BaseUrl=<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>;</div><div class=\"line\">      Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">              .baseUrl(BaseUrl)</div><div class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">              .build();</div><div class=\"line\"></div><div class=\"line\">      MovieService movieService=retrofit.create(MovieService.class);</div><div class=\"line\">      movieService.RxJavaGetMovie(start,count)</div><div class=\"line\">             .subscribeOn(Schedulers.io())</div><div class=\"line\">              .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;MovieEntity&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(MovieEntity movieEntity)</span> </span>&#123;</div><div class=\"line\">                      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; movieEntity.getSubjects().size(); i++) &#123;</div><div class=\"line\">                          Log.d(<span class=\"string\">\"MainActivity\"</span>, movieEntity.getSubjects().get(i).getTitle());</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"封装请求过程\"><a href=\"#封装请求过程\" class=\"headerlink\" title=\"封装请求过程\"></a>封装请求过程</h2><p>创建一个HttpMethods</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li><font color=\"#ff0000\">java.lang.IllegalArgumentException: Unable to create converter for class cn.shay.rxjavaretrofit.Entity.MovieEntity</font>\n\n</li>\n</ul>\n<p><font color=\"#24ff00\">解决方案：</font><br>在Retrofit 1.9中，GsonConverter 包含在了package 中而且自动在RestAdapter创建的时候被初始化。这样来自服务器的son结果会自动解析成定义好了的Data Access Object（DAO）<br>但是在Retrofit 2.0中，Converter 不再包含在package 中了。你需要自己插入一个Converter 不然的话Retrofit 只能接收字符串结果。同样的，Retrofit 2.0也不再依赖于Gson 。<br>如果你想接收json 结果并解析成DAO，你必须把Gson Converter 作为一个独立的依赖添加进来,然后使用addConverterFactory把它添加进来。</p>\n","excerpt":"","more":"<h1 id=\"RxJava如何与Retrofit结合\"><a href=\"#RxJava如何与Retrofit结合\" class=\"headerlink\" title=\"RxJava如何与Retrofit结合\"></a>RxJava如何与Retrofit结合</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>添加以下依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxandroid:+'</span></div><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:retrofit:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:converter-gson:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:adapter-rxjava:+'</span></div><div class=\"line\">compile <span class=\"string\">'com.google.code.gson:gson:+'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"只使用Retrofit\"><a href=\"#只使用Retrofit\" class=\"headerlink\" title=\"只使用Retrofit\"></a>只使用Retrofit</h2><p>使用豆瓣电影Top250作为测试接口，api地址：<br><a href=\"https://api.douban.com/v2/movie/top250?start=0&amp;count=10\">https://api.douban.com/v2/movie/top250?start=0&amp;count=10</a></p>\n<h3 id=\"封装Entity\"><a href=\"#封装Entity\" class=\"headerlink\" title=\"封装Entity\"></a>封装Entity</h3><p>根据接口返回的json数据封装Entity</p>\n<h3 id=\"创建访问数据的接口\"><a href=\"#创建访问数据的接口\" class=\"headerlink\" title=\"创建访问数据的接口\"></a>创建访问数据的接口</h3><p>实例代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MovieService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</div><div class=\"line\">  <span class=\"function\">Call&lt;MovieEntity&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@Query(<span class=\"string\">\"start\"</span>)</span> <span class=\"keyword\">int</span> start,@<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"count\"</span>)</span> <span class=\"keyword\">int</span> count)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***</div><div class=\"line\">    *  只使用Retrofit进行访问</div><div class=\"line\">    * <span class=\"doctag\">@param</span> start 开始的位置</div><div class=\"line\">    * <span class=\"doctag\">@param</span> count 每次获取多少条数据</div><div class=\"line\">    */</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RetrofitGetMovie</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> count)</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">     String BaseUrl=<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>; <span class=\"comment\">//此处注意链接的结尾</span></div><div class=\"line\"></div><div class=\"line\">       Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">               .baseUrl(BaseUrl)</div><div class=\"line\">               .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">               .build();</div><div class=\"line\">       MovieService movieService=retrofit.create(MovieService.class);</div><div class=\"line\"></div><div class=\"line\">       Call&lt;MovieEntity&gt; repos=movieService.getTopMovie(start,count);</div><div class=\"line\">       repos.enqueue(<span class=\"keyword\">new</span> Callback&lt;MovieEntity&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;MovieEntity&gt; call, Response&lt;MovieEntity&gt; response)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; response.body().getSubjects().size(); i++) &#123;</div><div class=\"line\">                   Log.d(<span class=\"string\">\"MainActivity\"</span>, response.body().getSubjects().get(i).getOriginal_title());</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;MovieEntity&gt; call, Throwable t)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 此处的repos.enqueue是使用异步请求。也可以使用repos.execute进行同步请求（值得注意的是这个方法不能直接放在主线程中，否则会有<font color=\"#ff0000\">NetworkOnMainThreadException</font>的异常）</p>\n<h2 id=\"加入RxJava\"><a href=\"#加入RxJava\" class=\"headerlink\" title=\"加入RxJava\"></a>加入RxJava</h2><p> 创建Retrofit的过程变为：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">              .baseUrl(BaseUrl)</div><div class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">              .build();</div></pre></td></tr></table></figure></p>\n<p>修改MovieService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</div><div class=\"line\">   <span class=\"function\">Observable&lt;MovieEntity&gt; <span class=\"title\">RxJavaGetMovie</span><span class=\"params\">(@Query(<span class=\"string\">\"start\"</span>)</span> <span class=\"keyword\">int</span> start, @<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"count\"</span>)</span> <span class=\"keyword\">int</span> count)</span>;</div></pre></td></tr></table></figure></p>\n<p>完整请求代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RxJavaRetrofitGetMovie</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> count)</span></div><div class=\"line\">  </span>&#123;</div><div class=\"line\">    String BaseUrl=<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>;</div><div class=\"line\">      Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">              .baseUrl(BaseUrl)</div><div class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">              .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">              .build();</div><div class=\"line\"></div><div class=\"line\">      MovieService movieService=retrofit.create(MovieService.class);</div><div class=\"line\">      movieService.RxJavaGetMovie(start,count)</div><div class=\"line\">             .subscribeOn(Schedulers.io())</div><div class=\"line\">              .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;MovieEntity&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(MovieEntity movieEntity)</span> </span>&#123;</div><div class=\"line\">                      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; movieEntity.getSubjects().size(); i++) &#123;</div><div class=\"line\">                          Log.d(<span class=\"string\">\"MainActivity\"</span>, movieEntity.getSubjects().get(i).getTitle());</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"封装请求过程\"><a href=\"#封装请求过程\" class=\"headerlink\" title=\"封装请求过程\"></a>封装请求过程</h2><p>创建一个HttpMethods</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li><font color=\"#ff0000\" >java.lang.IllegalArgumentException: Unable to create converter for class cn.shay.rxjavaretrofit.Entity.MovieEntity</font>\n\n</li>\n</ul>\n<p><font color=\"#24ff00\">解决方案：</font><br>在Retrofit 1.9中，GsonConverter 包含在了package 中而且自动在RestAdapter创建的时候被初始化。这样来自服务器的son结果会自动解析成定义好了的Data Access Object（DAO）<br>但是在Retrofit 2.0中，Converter 不再包含在package 中了。你需要自己插入一个Converter 不然的话Retrofit 只能接收字符串结果。同样的，Retrofit 2.0也不再依赖于Gson 。<br>如果你想接收json 结果并解析成DAO，你必须把Gson Converter 作为一个独立的依赖添加进来,然后使用addConverterFactory把它添加进来。</p>\n"},{"title":"lnmp常用命令","date":"2017-02-05T14:16:15.000Z","_content":"# 操作命令\nservice nginx  start|stop|reload\nservice php7.0-fpm  start|stop|reload\nservice mysql  start|stop|reload\n\n# nginx配置目录：\n/etc/nginx/nginx.conf   \n/etc/nginx/sites-available/default\n# php.ini目录:\n/etc/php/7.0/fpm/php.ini\n","source":"_posts/lnmp.md","raw":"---\ntitle: lnmp常用命令\ndate: 2017-02-05 22:16:15\ncategories: linux\ntags: [lnmp,php,linux]\n---\n# 操作命令\nservice nginx  start|stop|reload\nservice php7.0-fpm  start|stop|reload\nservice mysql  start|stop|reload\n\n# nginx配置目录：\n/etc/nginx/nginx.conf   \n/etc/nginx/sites-available/default\n# php.ini目录:\n/etc/php/7.0/fpm/php.ini\n","slug":"lnmp","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizol0009jedz4omycn9e","content":"<h1 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h1><p>service nginx  start|stop|reload<br>service php7.0-fpm  start|stop|reload<br>service mysql  start|stop|reload</p>\n<h1 id=\"nginx配置目录：\"><a href=\"#nginx配置目录：\" class=\"headerlink\" title=\"nginx配置目录：\"></a>nginx配置目录：</h1><p>/etc/nginx/nginx.conf<br>/etc/nginx/sites-available/default</p>\n<h1 id=\"php-ini目录\"><a href=\"#php-ini目录\" class=\"headerlink\" title=\"php.ini目录:\"></a>php.ini目录:</h1><p>/etc/php/7.0/fpm/php.ini</p>\n","excerpt":"","more":"<h1 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h1><p>service nginx  start|stop|reload<br>service php7.0-fpm  start|stop|reload<br>service mysql  start|stop|reload</p>\n<h1 id=\"nginx配置目录：\"><a href=\"#nginx配置目录：\" class=\"headerlink\" title=\"nginx配置目录：\"></a>nginx配置目录：</h1><p>/etc/nginx/nginx.conf<br>/etc/nginx/sites-available/default</p>\n<h1 id=\"php-ini目录\"><a href=\"#php-ini目录\" class=\"headerlink\" title=\"php.ini目录:\"></a>php.ini目录:</h1><p>/etc/php/7.0/fpm/php.ini</p>\n"},{"title":"ubuntu手动搭建lnmp开发环境","date":"2017-02-05T12:35:23.000Z","_content":"\n# 安装nginx:\n 已经安装了Apache2的话，那么使用这些命令先删除再安装nginx：\n``` linux\n\tservice apache2 stop\n\tupdate-rc.d -f apache2 remove\n\tapt-get remove apache2\n```\n\tUbuntu16.04有Nginx安装包，我们可以安装。\n```\n  apt-get -y install nginx\n\tservice nginx start\n```\n\t在Ubuntu16.04的默认nginx的文档根目录为/var/www/html\n\n# 安装php7:\n```\n\tapt-get -y install php7.0-fpm\n```\n\n# 配置nginx:\n\t打开配置文件 /etc/nginx/nginx.conf\n\t首先（这是可选）调整keepalive_timeout到一个合理的值：\n```\n\t[...]\n\t    keepalive_timeout   2;\n\t[...]\n```\n\t打开容器定义 /etc/nginx/sites-available/default\n\t更改如下：\n  ```\n\tserver {\n\t listen 80 default_server;\n\t listen [::]:80 default_server;\n\n\t # SSL configuration\n\t #\n\t # listen 443 ssl default_server;\n\t # listen [::]:443 ssl default_server;\n\t #\n\t # Note: You should disable gzip for SSL traffic.\n\t # See: https://bugs.debian.org/773332\n\t #\n\t # Read up on ssl_ciphers to ensure a secure configuration.\n\t # See: https://bugs.debian.org/765782\n\t #\n\t # Self signed certs generated by the ssl-cert package\n\t # Don't use them in a production server!\n\t #\n\t # include snippets/snakeoil.conf;\n\n\t root /var/www/html;\n\n\t # Add index.php to the list if you are using PHP\n\t index index.html index.htm index.nginx-debian.html;\n\n\t server_name _;\n\n\t location / {\n\t # First attempt to serve request as file, then\n\t # as directory, then fall back to displaying a 404.\n\t try_files $uri $uri/ =404;\n\t }\n\n\t # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t #\n\t location ~ \\.php$ {\n\t include snippets/fastcgi-php.conf;\n\n\t # With php7.0-cgi alone:\n\t # fastcgi_pass 127.0.0.1:9000;\n\t # With php7.0-fpm:\n\t fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n\t }\n\n\t # deny access to .htaccess files, if Apache's document root\n\t # concurs with nginx's one\n\t #\n\t location ~ /\\.ht {\n\t  deny all;\n\t }\n\t}\n```\n\tserver_name:使这是一个默认捕捉所有虚拟主机（当然，你可以同时喜欢这里www.example.com指定主机名）。\n\n\t根目录 /var/www/html;意味着文档根目录/var/www/html.\n\n\tPHP的重要组成部分位置 ~ \\.php$ {} stanza. 取消注释它来启用它。\n\n\t现在保存文件并重新加载nginx：\n```\n\tservice nginx reload\n```\n\t打开配置文件: /etc/php/7.0/fpm/php.ini\n  ```\n\t[...]\n\t; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n\t; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n\t; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n\t; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n\t; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n\t; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n\t; http://php.net/cgi.fix-pathinfo\n\tcgi.fix_pathinfo=0\n\t[...]\n  ```\n\t重启php7：service php7.0-fpm reload\n\n# 安装mysql:\n\n\t安装 MySQL 运行命令：\n```\n\tapt-get -y install mysql-server mysql-client\n```\n\t你会被要求提供MySQL的root用户密码 ：\n\n\t设置mysql安全：\n\tmysql_secure_installation\n\n\t让 MySQL 获得 PHP 7支持\n\n\t先搜索一下PHP支持的模块：\n\n\tapt-cache search php7.0\n\n\t使用下面的命令安装：\n```\n\tapt-get -y install php7.0-mysql php7.0-curl php7.0-gd php7.0-intl php-pear php-imagick php7.0-imap php7.0-mcrypt php-memcache  php7.0-pspell php7.0-recode php7.0-sqlite3 php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php-gettext\n```\n\tAPCu是随PHP7 PHP Opcache模块的扩展，它增加了一些兼容性功能的支持APC缓存（例如WordPress的插件缓存）软件。\n\n\tAPCu可以安装如下：\n\n\tapt-get -y install php-apcu\n\n\t重新加载 PHP-FPM:\n\n\tservice php7.0-fpm reload\n\n\n# 卸载mysql\n```\nsudo deluser mysql\nsudo delgroup mysql\n\nsudo service mysql stop  #or mysqld\nsudo killall -9 mysql\nsudo killall -9 mysqld\nsudo apt-get remove --purge mysql-server mysql-client mysql-common\nsudo apt-get autoremove\nsudo apt-get autoclean\nsudo deluser mysql\nsudo rm -rf /var/lib/mysql\nsudo apt-get purge mysql-server-core-5.5\nsudo apt-get purge mysql-client-core-5.5\nsudo rm -rf /var/log/mysql\nsudo rm -rf /etc/mysql\n```\n","source":"_posts/ubuntu-lnmp.md","raw":"---\ntitle: ubuntu手动搭建lnmp开发环境\ndate: 2017-02-05 20:35:23\ncategories: linux\ntags: [linux,lanmp,php,mysql]\n---\n\n# 安装nginx:\n 已经安装了Apache2的话，那么使用这些命令先删除再安装nginx：\n``` linux\n\tservice apache2 stop\n\tupdate-rc.d -f apache2 remove\n\tapt-get remove apache2\n```\n\tUbuntu16.04有Nginx安装包，我们可以安装。\n```\n  apt-get -y install nginx\n\tservice nginx start\n```\n\t在Ubuntu16.04的默认nginx的文档根目录为/var/www/html\n\n# 安装php7:\n```\n\tapt-get -y install php7.0-fpm\n```\n\n# 配置nginx:\n\t打开配置文件 /etc/nginx/nginx.conf\n\t首先（这是可选）调整keepalive_timeout到一个合理的值：\n```\n\t[...]\n\t    keepalive_timeout   2;\n\t[...]\n```\n\t打开容器定义 /etc/nginx/sites-available/default\n\t更改如下：\n  ```\n\tserver {\n\t listen 80 default_server;\n\t listen [::]:80 default_server;\n\n\t # SSL configuration\n\t #\n\t # listen 443 ssl default_server;\n\t # listen [::]:443 ssl default_server;\n\t #\n\t # Note: You should disable gzip for SSL traffic.\n\t # See: https://bugs.debian.org/773332\n\t #\n\t # Read up on ssl_ciphers to ensure a secure configuration.\n\t # See: https://bugs.debian.org/765782\n\t #\n\t # Self signed certs generated by the ssl-cert package\n\t # Don't use them in a production server!\n\t #\n\t # include snippets/snakeoil.conf;\n\n\t root /var/www/html;\n\n\t # Add index.php to the list if you are using PHP\n\t index index.html index.htm index.nginx-debian.html;\n\n\t server_name _;\n\n\t location / {\n\t # First attempt to serve request as file, then\n\t # as directory, then fall back to displaying a 404.\n\t try_files $uri $uri/ =404;\n\t }\n\n\t # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t #\n\t location ~ \\.php$ {\n\t include snippets/fastcgi-php.conf;\n\n\t # With php7.0-cgi alone:\n\t # fastcgi_pass 127.0.0.1:9000;\n\t # With php7.0-fpm:\n\t fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n\t }\n\n\t # deny access to .htaccess files, if Apache's document root\n\t # concurs with nginx's one\n\t #\n\t location ~ /\\.ht {\n\t  deny all;\n\t }\n\t}\n```\n\tserver_name:使这是一个默认捕捉所有虚拟主机（当然，你可以同时喜欢这里www.example.com指定主机名）。\n\n\t根目录 /var/www/html;意味着文档根目录/var/www/html.\n\n\tPHP的重要组成部分位置 ~ \\.php$ {} stanza. 取消注释它来启用它。\n\n\t现在保存文件并重新加载nginx：\n```\n\tservice nginx reload\n```\n\t打开配置文件: /etc/php/7.0/fpm/php.ini\n  ```\n\t[...]\n\t; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n\t; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n\t; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n\t; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n\t; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n\t; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n\t; http://php.net/cgi.fix-pathinfo\n\tcgi.fix_pathinfo=0\n\t[...]\n  ```\n\t重启php7：service php7.0-fpm reload\n\n# 安装mysql:\n\n\t安装 MySQL 运行命令：\n```\n\tapt-get -y install mysql-server mysql-client\n```\n\t你会被要求提供MySQL的root用户密码 ：\n\n\t设置mysql安全：\n\tmysql_secure_installation\n\n\t让 MySQL 获得 PHP 7支持\n\n\t先搜索一下PHP支持的模块：\n\n\tapt-cache search php7.0\n\n\t使用下面的命令安装：\n```\n\tapt-get -y install php7.0-mysql php7.0-curl php7.0-gd php7.0-intl php-pear php-imagick php7.0-imap php7.0-mcrypt php-memcache  php7.0-pspell php7.0-recode php7.0-sqlite3 php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php-gettext\n```\n\tAPCu是随PHP7 PHP Opcache模块的扩展，它增加了一些兼容性功能的支持APC缓存（例如WordPress的插件缓存）软件。\n\n\tAPCu可以安装如下：\n\n\tapt-get -y install php-apcu\n\n\t重新加载 PHP-FPM:\n\n\tservice php7.0-fpm reload\n\n\n# 卸载mysql\n```\nsudo deluser mysql\nsudo delgroup mysql\n\nsudo service mysql stop  #or mysqld\nsudo killall -9 mysql\nsudo killall -9 mysqld\nsudo apt-get remove --purge mysql-server mysql-client mysql-common\nsudo apt-get autoremove\nsudo apt-get autoclean\nsudo deluser mysql\nsudo rm -rf /var/lib/mysql\nsudo apt-get purge mysql-server-core-5.5\nsudo apt-get purge mysql-client-core-5.5\nsudo rm -rf /var/log/mysql\nsudo rm -rf /etc/mysql\n```\n","slug":"ubuntu-lnmp","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizor000bjedzo3u0euoe","content":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx:\"></a>安装nginx:</h1><p> 已经安装了Apache2的话，那么使用这些命令先删除再安装nginx：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">service apache2 stop</div><div class=\"line\">update-rc.d -f apache2 remove</div><div class=\"line\">apt-get remove apache2</div></pre></td></tr></table></figure></p>\n<pre><code>Ubuntu16.04有Nginx安装包，我们可以安装。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> apt-get -y install nginx</div><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<pre><code>在Ubuntu16.04的默认nginx的文档根目录为/var/www/html\n</code></pre><h1 id=\"安装php7\"><a href=\"#安装php7\" class=\"headerlink\" title=\"安装php7:\"></a>安装php7:</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install php7.0-fpm</div></pre></td></tr></table></figure>\n<h1 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx:\"></a>配置nginx:</h1><pre><code>打开配置文件 /etc/nginx/nginx.conf\n首先（这是可选）调整keepalive_timeout到一个合理的值：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]</div><div class=\"line\">    keepalive_timeout   2;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<pre><code>打开容器定义 /etc/nginx/sites-available/default\n更改如下：\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"> listen 80 default_server;</div><div class=\"line\"> listen [::]:80 default_server;</div><div class=\"line\"></div><div class=\"line\"> # SSL configuration</div><div class=\"line\"> #</div><div class=\"line\"> # listen 443 ssl default_server;</div><div class=\"line\"> # listen [::]:443 ssl default_server;</div><div class=\"line\"> #</div><div class=\"line\"> # Note: You should disable gzip for SSL traffic.</div><div class=\"line\"> # See: https://bugs.debian.org/773332</div><div class=\"line\"> #</div><div class=\"line\"> # Read up on ssl_ciphers to ensure a secure configuration.</div><div class=\"line\"> # See: https://bugs.debian.org/765782</div><div class=\"line\"> #</div><div class=\"line\"> # Self signed certs generated by the ssl-cert package</div><div class=\"line\"> # Don&apos;t use them in a production server!</div><div class=\"line\"> #</div><div class=\"line\"> # include snippets/snakeoil.conf;</div><div class=\"line\"></div><div class=\"line\"> root /var/www/html;</div><div class=\"line\"></div><div class=\"line\"> # Add index.php to the list if you are using PHP</div><div class=\"line\"> index index.html index.htm index.nginx-debian.html;</div><div class=\"line\"></div><div class=\"line\"> server_name _;</div><div class=\"line\"></div><div class=\"line\"> location / &#123;</div><div class=\"line\"> # First attempt to serve request as file, then</div><div class=\"line\"> # as directory, then fall back to displaying a 404.</div><div class=\"line\"> try_files $uri $uri/ =404;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class=\"line\"> #</div><div class=\"line\"> location ~ \\.php$ &#123;</div><div class=\"line\"> include snippets/fastcgi-php.conf;</div><div class=\"line\"></div><div class=\"line\"> # With php7.0-cgi alone:</div><div class=\"line\"> # fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\"> # With php7.0-fpm:</div><div class=\"line\"> fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> # deny access to .htaccess files, if Apache&apos;s document root</div><div class=\"line\"> # concurs with nginx&apos;s one</div><div class=\"line\"> #</div><div class=\"line\"> location ~ /\\.ht &#123;</div><div class=\"line\">  deny all;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>server_name:使这是一个默认捕捉所有虚拟主机（当然，你可以同时喜欢这里www.example.com指定主机名）。\n\n根目录 /var/www/html;意味着文档根目录/var/www/html.\n\nPHP的重要组成部分位置 ~ \\.php$ {} stanza. 取消注释它来启用它。\n\n现在保存文件并重新加载nginx：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx reload</div></pre></td></tr></table></figure>\n<pre><code>打开配置文件: /etc/php/7.0/fpm/php.ini\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]</div><div class=\"line\">; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP&apos;s</div><div class=\"line\">; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok</div><div class=\"line\">; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting</div><div class=\"line\">; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting</div><div class=\"line\">; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts</div><div class=\"line\">; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.</div><div class=\"line\">; http://php.net/cgi.fix-pathinfo</div><div class=\"line\">cgi.fix_pathinfo=0</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<pre><code>重启php7：service php7.0-fpm reload\n</code></pre><h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql:\"></a>安装mysql:</h1><pre><code>安装 MySQL 运行命令：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install mysql-server mysql-client</div></pre></td></tr></table></figure>\n<pre><code>你会被要求提供MySQL的root用户密码 ：\n\n设置mysql安全：\nmysql_secure_installation\n\n让 MySQL 获得 PHP 7支持\n\n先搜索一下PHP支持的模块：\n\napt-cache search php7.0\n\n使用下面的命令安装：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install php7.0-mysql php7.0-curl php7.0-gd php7.0-intl php-pear php-imagick php7.0-imap php7.0-mcrypt php-memcache  php7.0-pspell php7.0-recode php7.0-sqlite3 php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php-gettext</div></pre></td></tr></table></figure>\n<pre><code>APCu是随PHP7 PHP Opcache模块的扩展，它增加了一些兼容性功能的支持APC缓存（例如WordPress的插件缓存）软件。\n\nAPCu可以安装如下：\n\napt-get -y install php-apcu\n\n重新加载 PHP-FPM:\n\nservice php7.0-fpm reload\n</code></pre><h1 id=\"卸载mysql\"><a href=\"#卸载mysql\" class=\"headerlink\" title=\"卸载mysql\"></a>卸载mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo deluser mysql</div><div class=\"line\">sudo delgroup mysql</div><div class=\"line\"></div><div class=\"line\">sudo service mysql stop  #or mysqld</div><div class=\"line\">sudo killall -9 mysql</div><div class=\"line\">sudo killall -9 mysqld</div><div class=\"line\">sudo apt-get remove --purge mysql-server mysql-client mysql-common</div><div class=\"line\">sudo apt-get autoremove</div><div class=\"line\">sudo apt-get autoclean</div><div class=\"line\">sudo deluser mysql</div><div class=\"line\">sudo rm -rf /var/lib/mysql</div><div class=\"line\">sudo apt-get purge mysql-server-core-5.5</div><div class=\"line\">sudo apt-get purge mysql-client-core-5.5</div><div class=\"line\">sudo rm -rf /var/log/mysql</div><div class=\"line\">sudo rm -rf /etc/mysql</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx:\"></a>安装nginx:</h1><p> 已经安装了Apache2的话，那么使用这些命令先删除再安装nginx：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">service apache2 stop</div><div class=\"line\">update-rc.d -f apache2 remove</div><div class=\"line\">apt-get remove apache2</div></pre></td></tr></table></figure></p>\n<pre><code>Ubuntu16.04有Nginx安装包，我们可以安装。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> apt-get -y install nginx</div><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<pre><code>在Ubuntu16.04的默认nginx的文档根目录为/var/www/html\n</code></pre><h1 id=\"安装php7\"><a href=\"#安装php7\" class=\"headerlink\" title=\"安装php7:\"></a>安装php7:</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install php7.0-fpm</div></pre></td></tr></table></figure>\n<h1 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx:\"></a>配置nginx:</h1><pre><code>打开配置文件 /etc/nginx/nginx.conf\n首先（这是可选）调整keepalive_timeout到一个合理的值：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]</div><div class=\"line\">    keepalive_timeout   2;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<pre><code>打开容器定义 /etc/nginx/sites-available/default\n更改如下：\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"> listen 80 default_server;</div><div class=\"line\"> listen [::]:80 default_server;</div><div class=\"line\"></div><div class=\"line\"> # SSL configuration</div><div class=\"line\"> #</div><div class=\"line\"> # listen 443 ssl default_server;</div><div class=\"line\"> # listen [::]:443 ssl default_server;</div><div class=\"line\"> #</div><div class=\"line\"> # Note: You should disable gzip for SSL traffic.</div><div class=\"line\"> # See: https://bugs.debian.org/773332</div><div class=\"line\"> #</div><div class=\"line\"> # Read up on ssl_ciphers to ensure a secure configuration.</div><div class=\"line\"> # See: https://bugs.debian.org/765782</div><div class=\"line\"> #</div><div class=\"line\"> # Self signed certs generated by the ssl-cert package</div><div class=\"line\"> # Don&apos;t use them in a production server!</div><div class=\"line\"> #</div><div class=\"line\"> # include snippets/snakeoil.conf;</div><div class=\"line\"></div><div class=\"line\"> root /var/www/html;</div><div class=\"line\"></div><div class=\"line\"> # Add index.php to the list if you are using PHP</div><div class=\"line\"> index index.html index.htm index.nginx-debian.html;</div><div class=\"line\"></div><div class=\"line\"> server_name _;</div><div class=\"line\"></div><div class=\"line\"> location / &#123;</div><div class=\"line\"> # First attempt to serve request as file, then</div><div class=\"line\"> # as directory, then fall back to displaying a 404.</div><div class=\"line\"> try_files $uri $uri/ =404;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class=\"line\"> #</div><div class=\"line\"> location ~ \\.php$ &#123;</div><div class=\"line\"> include snippets/fastcgi-php.conf;</div><div class=\"line\"></div><div class=\"line\"> # With php7.0-cgi alone:</div><div class=\"line\"> # fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\"> # With php7.0-fpm:</div><div class=\"line\"> fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> # deny access to .htaccess files, if Apache&apos;s document root</div><div class=\"line\"> # concurs with nginx&apos;s one</div><div class=\"line\"> #</div><div class=\"line\"> location ~ /\\.ht &#123;</div><div class=\"line\">  deny all;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>server_name:使这是一个默认捕捉所有虚拟主机（当然，你可以同时喜欢这里www.example.com指定主机名）。\n\n根目录 /var/www/html;意味着文档根目录/var/www/html.\n\nPHP的重要组成部分位置 ~ \\.php$ {} stanza. 取消注释它来启用它。\n\n现在保存文件并重新加载nginx：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx reload</div></pre></td></tr></table></figure>\n<pre><code>打开配置文件: /etc/php/7.0/fpm/php.ini\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]</div><div class=\"line\">; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP&apos;s</div><div class=\"line\">; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok</div><div class=\"line\">; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting</div><div class=\"line\">; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting</div><div class=\"line\">; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts</div><div class=\"line\">; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.</div><div class=\"line\">; http://php.net/cgi.fix-pathinfo</div><div class=\"line\">cgi.fix_pathinfo=0</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<pre><code>重启php7：service php7.0-fpm reload\n</code></pre><h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql:\"></a>安装mysql:</h1><pre><code>安装 MySQL 运行命令：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install mysql-server mysql-client</div></pre></td></tr></table></figure>\n<pre><code>你会被要求提供MySQL的root用户密码 ：\n\n设置mysql安全：\nmysql_secure_installation\n\n让 MySQL 获得 PHP 7支持\n\n先搜索一下PHP支持的模块：\n\napt-cache search php7.0\n\n使用下面的命令安装：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install php7.0-mysql php7.0-curl php7.0-gd php7.0-intl php-pear php-imagick php7.0-imap php7.0-mcrypt php-memcache  php7.0-pspell php7.0-recode php7.0-sqlite3 php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php-gettext</div></pre></td></tr></table></figure>\n<pre><code>APCu是随PHP7 PHP Opcache模块的扩展，它增加了一些兼容性功能的支持APC缓存（例如WordPress的插件缓存）软件。\n\nAPCu可以安装如下：\n\napt-get -y install php-apcu\n\n重新加载 PHP-FPM:\n\nservice php7.0-fpm reload\n</code></pre><h1 id=\"卸载mysql\"><a href=\"#卸载mysql\" class=\"headerlink\" title=\"卸载mysql\"></a>卸载mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo deluser mysql</div><div class=\"line\">sudo delgroup mysql</div><div class=\"line\"></div><div class=\"line\">sudo service mysql stop  #or mysqld</div><div class=\"line\">sudo killall -9 mysql</div><div class=\"line\">sudo killall -9 mysqld</div><div class=\"line\">sudo apt-get remove --purge mysql-server mysql-client mysql-common</div><div class=\"line\">sudo apt-get autoremove</div><div class=\"line\">sudo apt-get autoclean</div><div class=\"line\">sudo deluser mysql</div><div class=\"line\">sudo rm -rf /var/lib/mysql</div><div class=\"line\">sudo apt-get purge mysql-server-core-5.5</div><div class=\"line\">sudo apt-get purge mysql-client-core-5.5</div><div class=\"line\">sudo rm -rf /var/log/mysql</div><div class=\"line\">sudo rm -rf /etc/mysql</div></pre></td></tr></table></figure>\n"},{"title":"持久化技术","date":"2017-01-16T10:23:37.000Z","_content":"# 数据持久化简介\n数据持久化就是指将那些内存中瞬时数据保存到设备储存中，保证即使在手机或者电脑关机的情况下，这些数据仍然不会丢失的技术。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术提供了一种机制可以是让数据在瞬时状态和持久状态之间转换。\n\nAndroid系统主要提供了三种方式用来实现数据持久化技术，即是文件储存、SharedPreferences以及数据库存储。\n# 文件存储\n文件存储是Android中最基本的一中数据存储技术，他不对存储的类容进行任何格式化的处理，所有的数据都是原封不动的保存到文件当中的。如果向使用文件存储一些较为复杂的文本数据，就需要定义一套自己的格式规范，这样可以方便之后数据的解析。\n\n 代码示例：\n\n ```Java\n private void save(String content) {\n        FileOutputStream fileOutputStream = null;\n        BufferedWriter writer = null;\n\n        try {\n            fileOutputStream = openFileOutput(\"data\", Context.MODE_PRIVATE);\n            writer = new BufferedWriter(new OutputStreamWriter(fileOutputStream));\n            writer.write(content);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (writer!=null)\n                try {\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n\n    private String getdata()\n    {\n        FileInputStream inputStream=null;\n        BufferedReader reader=null;\n        StringBuilder builder=new StringBuilder();\n        try {\n            inputStream=openFileInput(\"data\");\n            reader=new BufferedReader(new InputStreamReader(inputStream));\n            String line=\"\";\n            while ((line=reader.readLine())!=null)\n            {\n                builder.append(line);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            if(reader!=null)\n            {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        return builder.toString();\n    }\n ```\n\n# Sharedpreferences\n不同于文件的存储方式，sharedpreferences是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且Sharedpreferences还支持多种不同的数据类型存储，如果存储的数据是一个字符串，那么读取出来的就是一个字符串；如果存储的是一个整形，那么读出来的就是一个整形。\n\n## Sharedpreferences存储数据\n\n### 获取Sharedpreferences对象\n#### Context类中的getSharedPreferences()方法\n此方法接收两个参数，第一个参数用于指定Sharedpreferences文件的名称，如果指定的文件不存在则会创建一个。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，其他集中模式已经被逐渐废除。\n#### Activity类中getPreferences()\n这个方法和Context中的getSharedPreferences()方法很相似，不过他只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为sharedpreferences的文件名。\n#### PreferenceManger类中的getDefaultSharedPreferences()方法\n这是一个静态方法，他接受一个Context参数，并使用当前应用程序的包名作为前缀来命名    SharedPreferences文件。\n\n### 向SharedPreferences存储数据的步骤\n\n- 1.调用Sharedpreferences对象的edit()方法来获取Sharedpreferences.Editor()对象。\n\n- 2.向Sharedpreferences.Editor()对象中添加数据，比如添加布尔型数据就使用putBoolean()方法。\n\n- 3.调用apply()方法提交数据。完成操作\n\n## Sharedpreferences读取数据\n获取Sharedpreferences对象后使用该对象的get方法获取相应数据。\n\n\n# SQLite数据库存储\nSqlite是一款轻量级关系型数据库，他的运算速度非常快，占用资源很少。Sqlite不仅支持标准的sql语法，还遵循数据库的ACID事物。\n\n## 创建数据库\nAndroid为我们提供了一个SqliteOpenHelper帮组类，这是一个抽象类，需要创建一个类去继承他并重写onCreate()和onUpgrade()这个两个方法。\n\n## DbHelper代码示例\n```Java\npublic class DbHelper extends SQLiteOpenHelper {\n\n    private static final String DATABASE_NAME = \"data.db\";\n    private static final int DATABASE_VERSION = 1;\n\n    public DbHelper(Context context) {\n        //CursorFactory设置为null,使用默认值\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n     db.execSQL(\"CREATE TABLE IF NOT EXISTS person(_id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR, age INTEGER)\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n## DBManger代码示例\n```Java\npublic class DBManger {\n    private DbHelper dbHelper;\n    private SQLiteDatabase sqLiteDatabase;\n\n    public DBManger(Context context) {\n        dbHelper=new DbHelper(context);\n        this.sqLiteDatabase = dbHelper.getWritableDatabase();\n    }\n\n    public void addPerson(List<person> personList)\n    {\n        sqLiteDatabase.beginTransaction();\n        for (person person : personList) {\n//            sqLiteDatabase.execSQL(\"INSERT INTO person VALUES(null, ?, ?)\",new Object[]{person.name,person.age});\n            ContentValues values = new ContentValues();\n            values.put(\"name\", person.name);\n            values.put(\"age\", person.age);\n            sqLiteDatabase.insert(\"person\",null,values);\n        }\n        sqLiteDatabase.setTransactionSuccessful();\n        sqLiteDatabase.endTransaction();\n    }\n\n\n    public void delPerson(person person)\n    {\n        sqLiteDatabase.delete(\"person\",\"age=?\",new String[]{String.valueOf(person.age)});\n    }\n}\n```\n\n# LitePal\nLitePal是一款开源的Android数据库框架，它采用了对象关系映射(ORM)的模式，并将我们平时开发时最常用到的一些数据库功能进行了封装，使得不用编写一行SQL语句就可以完成各种建表、増删改查的操作。\n\n## 数据库的创建\n定义一个JavaBean类，该类每个字段都对应数据库表中的一个列。\n如：\n```Java\npublic class Album extends DataSupport {\n\n    @Column(unique = true, defaultValue = \"unknown\")\n    private String name;\n\n    private float price;\n\n    private byte[] cover;\n\n    private List<Song> songs = new ArrayList<Song>();\n\n    public String getName() {\n        return name;\n    }\n\n    public Album setName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public float getPrice() {\n        return price;\n    }\n\n    public Album setPrice(float price) {\n        this.price = price;\n        return this;\n    }\n\n    public byte[] getCover() {\n        return cover;\n    }\n\n    public Album setCover(byte[] cover) {\n        this.cover = cover;\n        return this;\n    }\n\n    public List<Song> getSongs() {\n        return songs;\n    }\n\n    public Album setSongs(List<Song> songs) {\n        this.songs = songs;\n        return this;\n    }\n}\n```\n接下来我们还需要将该类添加到映射列表中(此处需要填写完整的路径以及名称)\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n  <litepal>\n    <dbname value=\"BookStore\"></dbname>\n    <version value=\"1\"></version>\n    <list>\n     <mapping class=\"cn.shay.mydemo.litepal.Album\"></mapping>\n        <mapping class=\"cn.shay.mydemo.litepal.Song\"></mapping>\n    </list>\n</litepal>\n\n```\n值得注意的是还需要在Application中初始化\n```Java\npublic class MyOwnApplication extends AnotherApplication {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        LitePal.initialize(this);\n    }\n    ...\n}\n```\n\n到目前为止，我们就把所有工作都做完了。现在进行一次任意的数据库操作数据库就可以被创建出来了。但是问题来了，怎么看数据库有没有被创建好呢？这里介绍一个比较好用的工具[Android-Debug-Database](https://github.com/amitshekhariitbhu/Android-Debug-Database)，这个工具可以方便的在电脑上使用浏览器产看手机上的数据库以及sharedperfences。\n\n要使用这个项目，只需要添加以下依赖：\n```\n debugCompile 'com.amitshekhar.android:debug-db:+'\n```\n然后开始运行软就可以开到类如下日志：\n```\nD/DebugDB: Open http://XXX.XXX.X.XXX:8080 in your browser\n```\n打这个地址就可以看到数据库以及sharedperfences相关数据了。\n\n## 数据库的升级\n使用SqliteOpenHelper的方式来升级数据库会把之前的表drop掉并新建一个表，这样会造成数据损失。虽然可以通过一系列操作避免数据的损失，但是这样的操作无疑是很繁琐的。通过使用litepal就可以很轻松的解决掉这个问题，使用litepal来生数据库非常简单，甚至完全不需要考虑任何逻辑。唯一需要做的就是想好你要怎么改，然后将数据库版本加1就可以了。数据完全不会丢失。\n\n\n## 添加数据\n先回忆一下之前添加数据方法，我们需要将数据添加到ContentValues对象中，再通过调用SqliteDatabase的insert()方法实现。\n\n那么使用LitePal呢？我们只需传教出模型类的实例并将要存储的数据设置好，最后调用一下save()就可以了。\n```Java\nAlbum albumToUpdate = DataSupport.find(Album.class, 1);\n                Song song1 = new Song();\n                song1.setName(String.valueOf(UUID.randomUUID()));\n                song1.setDuration(320);\n                song1.setAlbum(albumToUpdate);\n                song1.save();\n                Song song2 = new Song();\n                song2.setName(String.valueOf(UUID.randomUUID()));\n                song2.setDuration(356);\n                song2.setAlbum(albumToUpdate);\n                song2.save();\n```\n\n## 更新数据\n\n-  通过save()方法更新数据：\n```Java\n Album albumToUpdate = DataSupport.find(Album.class, 1);\n               albumToUpdate.setPrice(201.99f);\n               albumToUpdate.save();\n ```\n- 通过update()方法更新：\n```Java\nAlbum albumToUpdate = new Album();\n          albumToUpdate.setPrice(20.99f);\n          albumToUpdate.update(id);\n```\n\n- 通过updataAll()方法更新：\n```Java\nAlbum albumToUpdate = new Album();\n      albumToUpdate.setPrice(20.99f);\n      albumToUpdate.updateAll(\"name = ?\", \"album\");\n```\n\n## 删除数据\n- 通过delete()方法删除\n```Java\nDataSupport.delete(Song.class, 3);\n```\n- 通过deleteAll()方法删除\n```Java\n  DataSupport.deleteAll(Song.class, \"duration > ?\" , \"350\");\n```\n\n## 查询数据\n使用Litepal查询数据非常简单，只需要这样写：\n```Java\n    List<Song> allSongs = DataSupport.findAll(Song.class);\n```\n这样就把Song表的所有数据查出来了，而且结果已经放到了一个集合里面，不再需要使用Cursor一一取值了。\n除了findall()之外，litePal还提供了跟多其他方法来满足我们的需求，如：\n- 查询第一条数据：\n```Java\n    Song fristsong=DataSupport.findFirst(Song.class);\n```\n- 查询最后一条数据：\n```Java\n    Song fristsong=DataSupport.findLast(Song.class);\n\n```\n我们还可以通过连缀查询来定制更多的功能来实现自己的需求\n- select()查寻特定关键字的值\n```Java\nList<Song> allSongs = DataSupport.select(\"name\",\"price\").find(Song.class);\n```\n- where()条件查询\n```Java\nList<Song> allSongs = DataSupport.where(\"prcie>?\",\"15\").find(Song.class);\n```\n- order()用于指定结果的排序方式\n```Java\nList<Song> allSongs = DataSupport.order(\"price desc\").find(Song.class);\n```\n- limit()用于指定查询结果的数量，如查寻3条数据\n```Java\nList<Song> allSongs = DataSupport.limit(3).find(Song.class);\n```\n- offset()用于指定查询结果的偏移量，如查询第二三四条数据\n```Java\nList<Song> allSongs = DataSupport.limit(3).offset(1).find(Song.class);\n```\n- 连缀组合示例,查询第十一至二十条数据中价格大于10的name和price这两列数据，并将查选结果按照价格排序\n ```Java\n List<Song> allSongs = DataSupport.select(\"name\",\"price\")\n                        .where(\"price > ?\",\"10\")\n                        .order(\"price\")\n                        .limit(10)\n                        .offset(10)\n                        .find(Song.class);\n\n ```\n\n- 如果这些都不能满足你，你还可以用DataSupport.findBySQL()方法来做。参数是sql语句，注意该方法返回的是一个Cursor对象\n","source":"_posts/持久化技术.md","raw":"---\ntitle: 持久化技术\ndate: 2017-01-16 18:23:37\ncategories: Android  \ntags: [Sharedpreferences,Sqlite,LitePal]\n\n---\n# 数据持久化简介\n数据持久化就是指将那些内存中瞬时数据保存到设备储存中，保证即使在手机或者电脑关机的情况下，这些数据仍然不会丢失的技术。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术提供了一种机制可以是让数据在瞬时状态和持久状态之间转换。\n\nAndroid系统主要提供了三种方式用来实现数据持久化技术，即是文件储存、SharedPreferences以及数据库存储。\n# 文件存储\n文件存储是Android中最基本的一中数据存储技术，他不对存储的类容进行任何格式化的处理，所有的数据都是原封不动的保存到文件当中的。如果向使用文件存储一些较为复杂的文本数据，就需要定义一套自己的格式规范，这样可以方便之后数据的解析。\n\n 代码示例：\n\n ```Java\n private void save(String content) {\n        FileOutputStream fileOutputStream = null;\n        BufferedWriter writer = null;\n\n        try {\n            fileOutputStream = openFileOutput(\"data\", Context.MODE_PRIVATE);\n            writer = new BufferedWriter(new OutputStreamWriter(fileOutputStream));\n            writer.write(content);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (writer!=null)\n                try {\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n\n    private String getdata()\n    {\n        FileInputStream inputStream=null;\n        BufferedReader reader=null;\n        StringBuilder builder=new StringBuilder();\n        try {\n            inputStream=openFileInput(\"data\");\n            reader=new BufferedReader(new InputStreamReader(inputStream));\n            String line=\"\";\n            while ((line=reader.readLine())!=null)\n            {\n                builder.append(line);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            if(reader!=null)\n            {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        return builder.toString();\n    }\n ```\n\n# Sharedpreferences\n不同于文件的存储方式，sharedpreferences是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且Sharedpreferences还支持多种不同的数据类型存储，如果存储的数据是一个字符串，那么读取出来的就是一个字符串；如果存储的是一个整形，那么读出来的就是一个整形。\n\n## Sharedpreferences存储数据\n\n### 获取Sharedpreferences对象\n#### Context类中的getSharedPreferences()方法\n此方法接收两个参数，第一个参数用于指定Sharedpreferences文件的名称，如果指定的文件不存在则会创建一个。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，其他集中模式已经被逐渐废除。\n#### Activity类中getPreferences()\n这个方法和Context中的getSharedPreferences()方法很相似，不过他只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为sharedpreferences的文件名。\n#### PreferenceManger类中的getDefaultSharedPreferences()方法\n这是一个静态方法，他接受一个Context参数，并使用当前应用程序的包名作为前缀来命名    SharedPreferences文件。\n\n### 向SharedPreferences存储数据的步骤\n\n- 1.调用Sharedpreferences对象的edit()方法来获取Sharedpreferences.Editor()对象。\n\n- 2.向Sharedpreferences.Editor()对象中添加数据，比如添加布尔型数据就使用putBoolean()方法。\n\n- 3.调用apply()方法提交数据。完成操作\n\n## Sharedpreferences读取数据\n获取Sharedpreferences对象后使用该对象的get方法获取相应数据。\n\n\n# SQLite数据库存储\nSqlite是一款轻量级关系型数据库，他的运算速度非常快，占用资源很少。Sqlite不仅支持标准的sql语法，还遵循数据库的ACID事物。\n\n## 创建数据库\nAndroid为我们提供了一个SqliteOpenHelper帮组类，这是一个抽象类，需要创建一个类去继承他并重写onCreate()和onUpgrade()这个两个方法。\n\n## DbHelper代码示例\n```Java\npublic class DbHelper extends SQLiteOpenHelper {\n\n    private static final String DATABASE_NAME = \"data.db\";\n    private static final int DATABASE_VERSION = 1;\n\n    public DbHelper(Context context) {\n        //CursorFactory设置为null,使用默认值\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n     db.execSQL(\"CREATE TABLE IF NOT EXISTS person(_id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR, age INTEGER)\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n## DBManger代码示例\n```Java\npublic class DBManger {\n    private DbHelper dbHelper;\n    private SQLiteDatabase sqLiteDatabase;\n\n    public DBManger(Context context) {\n        dbHelper=new DbHelper(context);\n        this.sqLiteDatabase = dbHelper.getWritableDatabase();\n    }\n\n    public void addPerson(List<person> personList)\n    {\n        sqLiteDatabase.beginTransaction();\n        for (person person : personList) {\n//            sqLiteDatabase.execSQL(\"INSERT INTO person VALUES(null, ?, ?)\",new Object[]{person.name,person.age});\n            ContentValues values = new ContentValues();\n            values.put(\"name\", person.name);\n            values.put(\"age\", person.age);\n            sqLiteDatabase.insert(\"person\",null,values);\n        }\n        sqLiteDatabase.setTransactionSuccessful();\n        sqLiteDatabase.endTransaction();\n    }\n\n\n    public void delPerson(person person)\n    {\n        sqLiteDatabase.delete(\"person\",\"age=?\",new String[]{String.valueOf(person.age)});\n    }\n}\n```\n\n# LitePal\nLitePal是一款开源的Android数据库框架，它采用了对象关系映射(ORM)的模式，并将我们平时开发时最常用到的一些数据库功能进行了封装，使得不用编写一行SQL语句就可以完成各种建表、増删改查的操作。\n\n## 数据库的创建\n定义一个JavaBean类，该类每个字段都对应数据库表中的一个列。\n如：\n```Java\npublic class Album extends DataSupport {\n\n    @Column(unique = true, defaultValue = \"unknown\")\n    private String name;\n\n    private float price;\n\n    private byte[] cover;\n\n    private List<Song> songs = new ArrayList<Song>();\n\n    public String getName() {\n        return name;\n    }\n\n    public Album setName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public float getPrice() {\n        return price;\n    }\n\n    public Album setPrice(float price) {\n        this.price = price;\n        return this;\n    }\n\n    public byte[] getCover() {\n        return cover;\n    }\n\n    public Album setCover(byte[] cover) {\n        this.cover = cover;\n        return this;\n    }\n\n    public List<Song> getSongs() {\n        return songs;\n    }\n\n    public Album setSongs(List<Song> songs) {\n        this.songs = songs;\n        return this;\n    }\n}\n```\n接下来我们还需要将该类添加到映射列表中(此处需要填写完整的路径以及名称)\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n  <litepal>\n    <dbname value=\"BookStore\"></dbname>\n    <version value=\"1\"></version>\n    <list>\n     <mapping class=\"cn.shay.mydemo.litepal.Album\"></mapping>\n        <mapping class=\"cn.shay.mydemo.litepal.Song\"></mapping>\n    </list>\n</litepal>\n\n```\n值得注意的是还需要在Application中初始化\n```Java\npublic class MyOwnApplication extends AnotherApplication {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        LitePal.initialize(this);\n    }\n    ...\n}\n```\n\n到目前为止，我们就把所有工作都做完了。现在进行一次任意的数据库操作数据库就可以被创建出来了。但是问题来了，怎么看数据库有没有被创建好呢？这里介绍一个比较好用的工具[Android-Debug-Database](https://github.com/amitshekhariitbhu/Android-Debug-Database)，这个工具可以方便的在电脑上使用浏览器产看手机上的数据库以及sharedperfences。\n\n要使用这个项目，只需要添加以下依赖：\n```\n debugCompile 'com.amitshekhar.android:debug-db:+'\n```\n然后开始运行软就可以开到类如下日志：\n```\nD/DebugDB: Open http://XXX.XXX.X.XXX:8080 in your browser\n```\n打这个地址就可以看到数据库以及sharedperfences相关数据了。\n\n## 数据库的升级\n使用SqliteOpenHelper的方式来升级数据库会把之前的表drop掉并新建一个表，这样会造成数据损失。虽然可以通过一系列操作避免数据的损失，但是这样的操作无疑是很繁琐的。通过使用litepal就可以很轻松的解决掉这个问题，使用litepal来生数据库非常简单，甚至完全不需要考虑任何逻辑。唯一需要做的就是想好你要怎么改，然后将数据库版本加1就可以了。数据完全不会丢失。\n\n\n## 添加数据\n先回忆一下之前添加数据方法，我们需要将数据添加到ContentValues对象中，再通过调用SqliteDatabase的insert()方法实现。\n\n那么使用LitePal呢？我们只需传教出模型类的实例并将要存储的数据设置好，最后调用一下save()就可以了。\n```Java\nAlbum albumToUpdate = DataSupport.find(Album.class, 1);\n                Song song1 = new Song();\n                song1.setName(String.valueOf(UUID.randomUUID()));\n                song1.setDuration(320);\n                song1.setAlbum(albumToUpdate);\n                song1.save();\n                Song song2 = new Song();\n                song2.setName(String.valueOf(UUID.randomUUID()));\n                song2.setDuration(356);\n                song2.setAlbum(albumToUpdate);\n                song2.save();\n```\n\n## 更新数据\n\n-  通过save()方法更新数据：\n```Java\n Album albumToUpdate = DataSupport.find(Album.class, 1);\n               albumToUpdate.setPrice(201.99f);\n               albumToUpdate.save();\n ```\n- 通过update()方法更新：\n```Java\nAlbum albumToUpdate = new Album();\n          albumToUpdate.setPrice(20.99f);\n          albumToUpdate.update(id);\n```\n\n- 通过updataAll()方法更新：\n```Java\nAlbum albumToUpdate = new Album();\n      albumToUpdate.setPrice(20.99f);\n      albumToUpdate.updateAll(\"name = ?\", \"album\");\n```\n\n## 删除数据\n- 通过delete()方法删除\n```Java\nDataSupport.delete(Song.class, 3);\n```\n- 通过deleteAll()方法删除\n```Java\n  DataSupport.deleteAll(Song.class, \"duration > ?\" , \"350\");\n```\n\n## 查询数据\n使用Litepal查询数据非常简单，只需要这样写：\n```Java\n    List<Song> allSongs = DataSupport.findAll(Song.class);\n```\n这样就把Song表的所有数据查出来了，而且结果已经放到了一个集合里面，不再需要使用Cursor一一取值了。\n除了findall()之外，litePal还提供了跟多其他方法来满足我们的需求，如：\n- 查询第一条数据：\n```Java\n    Song fristsong=DataSupport.findFirst(Song.class);\n```\n- 查询最后一条数据：\n```Java\n    Song fristsong=DataSupport.findLast(Song.class);\n\n```\n我们还可以通过连缀查询来定制更多的功能来实现自己的需求\n- select()查寻特定关键字的值\n```Java\nList<Song> allSongs = DataSupport.select(\"name\",\"price\").find(Song.class);\n```\n- where()条件查询\n```Java\nList<Song> allSongs = DataSupport.where(\"prcie>?\",\"15\").find(Song.class);\n```\n- order()用于指定结果的排序方式\n```Java\nList<Song> allSongs = DataSupport.order(\"price desc\").find(Song.class);\n```\n- limit()用于指定查询结果的数量，如查寻3条数据\n```Java\nList<Song> allSongs = DataSupport.limit(3).find(Song.class);\n```\n- offset()用于指定查询结果的偏移量，如查询第二三四条数据\n```Java\nList<Song> allSongs = DataSupport.limit(3).offset(1).find(Song.class);\n```\n- 连缀组合示例,查询第十一至二十条数据中价格大于10的name和price这两列数据，并将查选结果按照价格排序\n ```Java\n List<Song> allSongs = DataSupport.select(\"name\",\"price\")\n                        .where(\"price > ?\",\"10\")\n                        .order(\"price\")\n                        .limit(10)\n                        .offset(10)\n                        .find(Song.class);\n\n ```\n\n- 如果这些都不能满足你，你还可以用DataSupport.findBySQL()方法来做。参数是sql语句，注意该方法返回的是一个Cursor对象\n","slug":"持久化技术","published":1,"updated":"2017-02-05T10:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj71zizoy000ejedz04rxyuj6","content":"<h1 id=\"数据持久化简介\"><a href=\"#数据持久化简介\" class=\"headerlink\" title=\"数据持久化简介\"></a>数据持久化简介</h1><p>数据持久化就是指将那些内存中瞬时数据保存到设备储存中，保证即使在手机或者电脑关机的情况下，这些数据仍然不会丢失的技术。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术提供了一种机制可以是让数据在瞬时状态和持久状态之间转换。</p>\n<p>Android系统主要提供了三种方式用来实现数据持久化技术，即是文件储存、SharedPreferences以及数据库存储。</p>\n<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><p>文件存储是Android中最基本的一中数据存储技术，他不对存储的类容进行任何格式化的处理，所有的数据都是原封不动的保存到文件当中的。如果向使用文件存储一些较为复杂的文本数据，就需要定义一套自己的格式规范，这样可以方便之后数据的解析。</p>\n<p> 代码示例：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">       FileOutputStream fileOutputStream = <span class=\"keyword\">null</span>;</div><div class=\"line\">       BufferedWriter writer = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           fileOutputStream = openFileOutput(<span class=\"string\">\"data\"</span>, Context.MODE_PRIVATE);</div><div class=\"line\">           writer = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(fileOutputStream));</div><div class=\"line\">           writer.write(content);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (writer!=<span class=\"keyword\">null</span>)</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   writer.close();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getdata</span><span class=\"params\">()</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">       FileInputStream inputStream=<span class=\"keyword\">null</span>;</div><div class=\"line\">       BufferedReader reader=<span class=\"keyword\">null</span>;</div><div class=\"line\">       StringBuilder builder=<span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           inputStream=openFileInput(<span class=\"string\">\"data\"</span>);</div><div class=\"line\">           reader=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">           String line=<span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">while</span> ((line=reader.readLine())!=<span class=\"keyword\">null</span>)</div><div class=\"line\">           &#123;</div><div class=\"line\">               builder.append(line);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   reader.close();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Sharedpreferences\"><a href=\"#Sharedpreferences\" class=\"headerlink\" title=\"Sharedpreferences\"></a>Sharedpreferences</h1><p>不同于文件的存储方式，sharedpreferences是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且Sharedpreferences还支持多种不同的数据类型存储，如果存储的数据是一个字符串，那么读取出来的就是一个字符串；如果存储的是一个整形，那么读出来的就是一个整形。</p>\n<h2 id=\"Sharedpreferences存储数据\"><a href=\"#Sharedpreferences存储数据\" class=\"headerlink\" title=\"Sharedpreferences存储数据\"></a>Sharedpreferences存储数据</h2><h3 id=\"获取Sharedpreferences对象\"><a href=\"#获取Sharedpreferences对象\" class=\"headerlink\" title=\"获取Sharedpreferences对象\"></a>获取Sharedpreferences对象</h3><h4 id=\"Context类中的getSharedPreferences-方法\"><a href=\"#Context类中的getSharedPreferences-方法\" class=\"headerlink\" title=\"Context类中的getSharedPreferences()方法\"></a>Context类中的getSharedPreferences()方法</h4><p>此方法接收两个参数，第一个参数用于指定Sharedpreferences文件的名称，如果指定的文件不存在则会创建一个。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，其他集中模式已经被逐渐废除。</p>\n<h4 id=\"Activity类中getPreferences\"><a href=\"#Activity类中getPreferences\" class=\"headerlink\" title=\"Activity类中getPreferences()\"></a>Activity类中getPreferences()</h4><p>这个方法和Context中的getSharedPreferences()方法很相似，不过他只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为sharedpreferences的文件名。</p>\n<h4 id=\"PreferenceManger类中的getDefaultSharedPreferences-方法\"><a href=\"#PreferenceManger类中的getDefaultSharedPreferences-方法\" class=\"headerlink\" title=\"PreferenceManger类中的getDefaultSharedPreferences()方法\"></a>PreferenceManger类中的getDefaultSharedPreferences()方法</h4><p>这是一个静态方法，他接受一个Context参数，并使用当前应用程序的包名作为前缀来命名    SharedPreferences文件。</p>\n<h3 id=\"向SharedPreferences存储数据的步骤\"><a href=\"#向SharedPreferences存储数据的步骤\" class=\"headerlink\" title=\"向SharedPreferences存储数据的步骤\"></a>向SharedPreferences存储数据的步骤</h3><ul>\n<li><p>1.调用Sharedpreferences对象的edit()方法来获取Sharedpreferences.Editor()对象。</p>\n</li>\n<li><p>2.向Sharedpreferences.Editor()对象中添加数据，比如添加布尔型数据就使用putBoolean()方法。</p>\n</li>\n<li><p>3.调用apply()方法提交数据。完成操作</p>\n</li>\n</ul>\n<h2 id=\"Sharedpreferences读取数据\"><a href=\"#Sharedpreferences读取数据\" class=\"headerlink\" title=\"Sharedpreferences读取数据\"></a>Sharedpreferences读取数据</h2><p>获取Sharedpreferences对象后使用该对象的get方法获取相应数据。</p>\n<h1 id=\"SQLite数据库存储\"><a href=\"#SQLite数据库存储\" class=\"headerlink\" title=\"SQLite数据库存储\"></a>SQLite数据库存储</h1><p>Sqlite是一款轻量级关系型数据库，他的运算速度非常快，占用资源很少。Sqlite不仅支持标准的sql语法，还遵循数据库的ACID事物。</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>Android为我们提供了一个SqliteOpenHelper帮组类，这是一个抽象类，需要创建一个类去继承他并重写onCreate()和onUpgrade()这个两个方法。</p>\n<h2 id=\"DbHelper代码示例\"><a href=\"#DbHelper代码示例\" class=\"headerlink\" title=\"DbHelper代码示例\"></a>DbHelper代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DbHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DATABASE_NAME = <span class=\"string\">\"data.db\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DATABASE_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DbHelper</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//CursorFactory设置为null,使用默认值</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(context, DATABASE_NAME, <span class=\"keyword\">null</span>, DATABASE_VERSION);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">     db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS person(_id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR, age INTEGER)\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"DBManger代码示例\"><a href=\"#DBManger代码示例\" class=\"headerlink\" title=\"DBManger代码示例\"></a>DBManger代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBManger</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DbHelper dbHelper;</div><div class=\"line\">    <span class=\"keyword\">private</span> SQLiteDatabase sqLiteDatabase;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBManger</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        dbHelper=<span class=\"keyword\">new</span> DbHelper(context);</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqLiteDatabase = dbHelper.getWritableDatabase();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPerson</span><span class=\"params\">(List&lt;person&gt; personList)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        sqLiteDatabase.beginTransaction();</div><div class=\"line\">        <span class=\"keyword\">for</span> (person person : personList) &#123;</div><div class=\"line\"><span class=\"comment\">//            sqLiteDatabase.execSQL(\"INSERT INTO person VALUES(null, ?, ?)\",new Object[]&#123;person.name,person.age&#125;);</span></div><div class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\">            values.put(<span class=\"string\">\"name\"</span>, person.name);</div><div class=\"line\">            values.put(<span class=\"string\">\"age\"</span>, person.age);</div><div class=\"line\">            sqLiteDatabase.insert(<span class=\"string\">\"person\"</span>,<span class=\"keyword\">null</span>,values);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sqLiteDatabase.setTransactionSuccessful();</div><div class=\"line\">        sqLiteDatabase.endTransaction();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delPerson</span><span class=\"params\">(person person)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        sqLiteDatabase.delete(<span class=\"string\">\"person\"</span>,<span class=\"string\">\"age=?\"</span>,<span class=\"keyword\">new</span> String[]&#123;String.valueOf(person.age)&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"LitePal\"><a href=\"#LitePal\" class=\"headerlink\" title=\"LitePal\"></a>LitePal</h1><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射(ORM)的模式，并将我们平时开发时最常用到的一些数据库功能进行了封装，使得不用编写一行SQL语句就可以完成各种建表、増删改查的操作。</p>\n<h2 id=\"数据库的创建\"><a href=\"#数据库的创建\" class=\"headerlink\" title=\"数据库的创建\"></a>数据库的创建</h2><p>定义一个JavaBean类，该类每个字段都对应数据库表中的一个列。<br>如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Album</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>, defaultValue = <span class=\"string\">\"unknown\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> price;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] cover;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Song&gt; songs = <span class=\"keyword\">new</span> ArrayList&lt;Song&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">float</span> price)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.price = price;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getCover() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cover;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setCover</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] cover)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cover = cover;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Song&gt; <span class=\"title\">getSongs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> songs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setSongs</span><span class=\"params\">(List&lt;Song&gt; songs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.songs = songs;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来我们还需要将该类添加到映射列表中(此处需要填写完整的路径以及名称)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">litepal</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dbname</span> <span class=\"attr\">value</span>=<span class=\"string\">\"BookStore\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dbname</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.shay.mydemo.litepal.Album\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.shay.mydemo.litepal.Song\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">litepal</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>值得注意的是还需要在Application中初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOwnApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnotherApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        LitePal.initialize(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到目前为止，我们就把所有工作都做完了。现在进行一次任意的数据库操作数据库就可以被创建出来了。但是问题来了，怎么看数据库有没有被创建好呢？这里介绍一个比较好用的工具<a href=\"https://github.com/amitshekhariitbhu/Android-Debug-Database\" target=\"_blank\" rel=\"external\">Android-Debug-Database</a>，这个工具可以方便的在电脑上使用浏览器产看手机上的数据库以及sharedperfences。</p>\n<p>要使用这个项目，只需要添加以下依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">debugCompile &apos;com.amitshekhar.android:debug-db:+&apos;</div></pre></td></tr></table></figure></p>\n<p>然后开始运行软就可以开到类如下日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">D/DebugDB: Open http://XXX.XXX.X.XXX:8080 in your browser</div></pre></td></tr></table></figure></p>\n<p>打这个地址就可以看到数据库以及sharedperfences相关数据了。</p>\n<h2 id=\"数据库的升级\"><a href=\"#数据库的升级\" class=\"headerlink\" title=\"数据库的升级\"></a>数据库的升级</h2><p>使用SqliteOpenHelper的方式来升级数据库会把之前的表drop掉并新建一个表，这样会造成数据损失。虽然可以通过一系列操作避免数据的损失，但是这样的操作无疑是很繁琐的。通过使用litepal就可以很轻松的解决掉这个问题，使用litepal来生数据库非常简单，甚至完全不需要考虑任何逻辑。唯一需要做的就是想好你要怎么改，然后将数据库版本加1就可以了。数据完全不会丢失。</p>\n<h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><p>先回忆一下之前添加数据方法，我们需要将数据添加到ContentValues对象中，再通过调用SqliteDatabase的insert()方法实现。</p>\n<p>那么使用LitePal呢？我们只需传教出模型类的实例并将要存储的数据设置好，最后调用一下save()就可以了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = DataSupport.find(Album.class, <span class=\"number\">1</span>);</div><div class=\"line\">                Song song1 = <span class=\"keyword\">new</span> Song();</div><div class=\"line\">                song1.setName(String.valueOf(UUID.randomUUID()));</div><div class=\"line\">                song1.setDuration(<span class=\"number\">320</span>);</div><div class=\"line\">                song1.setAlbum(albumToUpdate);</div><div class=\"line\">                song1.save();</div><div class=\"line\">                Song song2 = <span class=\"keyword\">new</span> Song();</div><div class=\"line\">                song2.setName(String.valueOf(UUID.randomUUID()));</div><div class=\"line\">                song2.setDuration(<span class=\"number\">356</span>);</div><div class=\"line\">                song2.setAlbum(albumToUpdate);</div><div class=\"line\">                song2.save();</div></pre></td></tr></table></figure></p>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><ul>\n<li><p>通过save()方法更新数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = DataSupport.find(Album.class, <span class=\"number\">1</span>);</div><div class=\"line\">              albumToUpdate.setPrice(<span class=\"number\">201.99f</span>);</div><div class=\"line\">              albumToUpdate.save();</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过update()方法更新：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = <span class=\"keyword\">new</span> Album();</div><div class=\"line\">          albumToUpdate.setPrice(<span class=\"number\">20.99f</span>);</div><div class=\"line\">          albumToUpdate.update(id);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过updataAll()方法更新：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = <span class=\"keyword\">new</span> Album();</div><div class=\"line\">      albumToUpdate.setPrice(<span class=\"number\">20.99f</span>);</div><div class=\"line\">      albumToUpdate.updateAll(<span class=\"string\">\"name = ?\"</span>, <span class=\"string\">\"album\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><ul>\n<li><p>通过delete()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataSupport.delete(Song.class, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过deleteAll()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataSupport.deleteAll(Song.class, <span class=\"string\">\"duration &gt; ?\"</span> , <span class=\"string\">\"350\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><p>使用Litepal查询数据非常简单，只需要这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.findAll(Song.class);</div></pre></td></tr></table></figure></p>\n<p>这样就把Song表的所有数据查出来了，而且结果已经放到了一个集合里面，不再需要使用Cursor一一取值了。<br>除了findall()之外，litePal还提供了跟多其他方法来满足我们的需求，如：</p>\n<ul>\n<li><p>查询第一条数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Song fristsong=DataSupport.findFirst(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询最后一条数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Song fristsong=DataSupport.findLast(Song.class);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们还可以通过连缀查询来定制更多的功能来实现自己的需求</p>\n<ul>\n<li><p>select()查寻特定关键字的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.select(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"price\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>where()条件查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.where(<span class=\"string\">\"prcie&gt;?\"</span>,<span class=\"string\">\"15\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>order()用于指定结果的排序方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.order(<span class=\"string\">\"price desc\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>limit()用于指定查询结果的数量，如查寻3条数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.limit(<span class=\"number\">3</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>offset()用于指定查询结果的偏移量，如查询第二三四条数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.limit(<span class=\"number\">3</span>).offset(<span class=\"number\">1</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连缀组合示例,查询第十一至二十条数据中价格大于10的name和price这两列数据，并将查选结果按照价格排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.select(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"price\"</span>)</div><div class=\"line\">                       .where(<span class=\"string\">\"price &gt; ?\"</span>,<span class=\"string\">\"10\"</span>)</div><div class=\"line\">                       .order(<span class=\"string\">\"price\"</span>)</div><div class=\"line\">                       .limit(<span class=\"number\">10</span>)</div><div class=\"line\">                       .offset(<span class=\"number\">10</span>)</div><div class=\"line\">                       .find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果这些都不能满足你，你还可以用DataSupport.findBySQL()方法来做。参数是sql语句，注意该方法返回的是一个Cursor对象</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"数据持久化简介\"><a href=\"#数据持久化简介\" class=\"headerlink\" title=\"数据持久化简介\"></a>数据持久化简介</h1><p>数据持久化就是指将那些内存中瞬时数据保存到设备储存中，保证即使在手机或者电脑关机的情况下，这些数据仍然不会丢失的技术。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术提供了一种机制可以是让数据在瞬时状态和持久状态之间转换。</p>\n<p>Android系统主要提供了三种方式用来实现数据持久化技术，即是文件储存、SharedPreferences以及数据库存储。</p>\n<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><p>文件存储是Android中最基本的一中数据存储技术，他不对存储的类容进行任何格式化的处理，所有的数据都是原封不动的保存到文件当中的。如果向使用文件存储一些较为复杂的文本数据，就需要定义一套自己的格式规范，这样可以方便之后数据的解析。</p>\n<p> 代码示例：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">       FileOutputStream fileOutputStream = <span class=\"keyword\">null</span>;</div><div class=\"line\">       BufferedWriter writer = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           fileOutputStream = openFileOutput(<span class=\"string\">\"data\"</span>, Context.MODE_PRIVATE);</div><div class=\"line\">           writer = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(fileOutputStream));</div><div class=\"line\">           writer.write(content);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (writer!=<span class=\"keyword\">null</span>)</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   writer.close();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getdata</span><span class=\"params\">()</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       FileInputStream inputStream=<span class=\"keyword\">null</span>;</div><div class=\"line\">       BufferedReader reader=<span class=\"keyword\">null</span>;</div><div class=\"line\">       StringBuilder builder=<span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           inputStream=openFileInput(<span class=\"string\">\"data\"</span>);</div><div class=\"line\">           reader=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">           String line=<span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">while</span> ((line=reader.readLine())!=<span class=\"keyword\">null</span>)</div><div class=\"line\">           &#123;</div><div class=\"line\">               builder.append(line);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   reader.close();</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Sharedpreferences\"><a href=\"#Sharedpreferences\" class=\"headerlink\" title=\"Sharedpreferences\"></a>Sharedpreferences</h1><p>不同于文件的存储方式，sharedpreferences是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且Sharedpreferences还支持多种不同的数据类型存储，如果存储的数据是一个字符串，那么读取出来的就是一个字符串；如果存储的是一个整形，那么读出来的就是一个整形。</p>\n<h2 id=\"Sharedpreferences存储数据\"><a href=\"#Sharedpreferences存储数据\" class=\"headerlink\" title=\"Sharedpreferences存储数据\"></a>Sharedpreferences存储数据</h2><h3 id=\"获取Sharedpreferences对象\"><a href=\"#获取Sharedpreferences对象\" class=\"headerlink\" title=\"获取Sharedpreferences对象\"></a>获取Sharedpreferences对象</h3><h4 id=\"Context类中的getSharedPreferences-方法\"><a href=\"#Context类中的getSharedPreferences-方法\" class=\"headerlink\" title=\"Context类中的getSharedPreferences()方法\"></a>Context类中的getSharedPreferences()方法</h4><p>此方法接收两个参数，第一个参数用于指定Sharedpreferences文件的名称，如果指定的文件不存在则会创建一个。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，其他集中模式已经被逐渐废除。</p>\n<h4 id=\"Activity类中getPreferences\"><a href=\"#Activity类中getPreferences\" class=\"headerlink\" title=\"Activity类中getPreferences()\"></a>Activity类中getPreferences()</h4><p>这个方法和Context中的getSharedPreferences()方法很相似，不过他只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为sharedpreferences的文件名。</p>\n<h4 id=\"PreferenceManger类中的getDefaultSharedPreferences-方法\"><a href=\"#PreferenceManger类中的getDefaultSharedPreferences-方法\" class=\"headerlink\" title=\"PreferenceManger类中的getDefaultSharedPreferences()方法\"></a>PreferenceManger类中的getDefaultSharedPreferences()方法</h4><p>这是一个静态方法，他接受一个Context参数，并使用当前应用程序的包名作为前缀来命名    SharedPreferences文件。</p>\n<h3 id=\"向SharedPreferences存储数据的步骤\"><a href=\"#向SharedPreferences存储数据的步骤\" class=\"headerlink\" title=\"向SharedPreferences存储数据的步骤\"></a>向SharedPreferences存储数据的步骤</h3><ul>\n<li><p>1.调用Sharedpreferences对象的edit()方法来获取Sharedpreferences.Editor()对象。</p>\n</li>\n<li><p>2.向Sharedpreferences.Editor()对象中添加数据，比如添加布尔型数据就使用putBoolean()方法。</p>\n</li>\n<li><p>3.调用apply()方法提交数据。完成操作</p>\n</li>\n</ul>\n<h2 id=\"Sharedpreferences读取数据\"><a href=\"#Sharedpreferences读取数据\" class=\"headerlink\" title=\"Sharedpreferences读取数据\"></a>Sharedpreferences读取数据</h2><p>获取Sharedpreferences对象后使用该对象的get方法获取相应数据。</p>\n<h1 id=\"SQLite数据库存储\"><a href=\"#SQLite数据库存储\" class=\"headerlink\" title=\"SQLite数据库存储\"></a>SQLite数据库存储</h1><p>Sqlite是一款轻量级关系型数据库，他的运算速度非常快，占用资源很少。Sqlite不仅支持标准的sql语法，还遵循数据库的ACID事物。</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>Android为我们提供了一个SqliteOpenHelper帮组类，这是一个抽象类，需要创建一个类去继承他并重写onCreate()和onUpgrade()这个两个方法。</p>\n<h2 id=\"DbHelper代码示例\"><a href=\"#DbHelper代码示例\" class=\"headerlink\" title=\"DbHelper代码示例\"></a>DbHelper代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DbHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DATABASE_NAME = <span class=\"string\">\"data.db\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DATABASE_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DbHelper</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//CursorFactory设置为null,使用默认值</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(context, DATABASE_NAME, <span class=\"keyword\">null</span>, DATABASE_VERSION);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">     db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS person(_id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR, age INTEGER)\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"DBManger代码示例\"><a href=\"#DBManger代码示例\" class=\"headerlink\" title=\"DBManger代码示例\"></a>DBManger代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBManger</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DbHelper dbHelper;</div><div class=\"line\">    <span class=\"keyword\">private</span> SQLiteDatabase sqLiteDatabase;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBManger</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        dbHelper=<span class=\"keyword\">new</span> DbHelper(context);</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqLiteDatabase = dbHelper.getWritableDatabase();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPerson</span><span class=\"params\">(List&lt;person&gt; personList)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        sqLiteDatabase.beginTransaction();</div><div class=\"line\">        <span class=\"keyword\">for</span> (person person : personList) &#123;</div><div class=\"line\"><span class=\"comment\">//            sqLiteDatabase.execSQL(\"INSERT INTO person VALUES(null, ?, ?)\",new Object[]&#123;person.name,person.age&#125;);</span></div><div class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\">            values.put(<span class=\"string\">\"name\"</span>, person.name);</div><div class=\"line\">            values.put(<span class=\"string\">\"age\"</span>, person.age);</div><div class=\"line\">            sqLiteDatabase.insert(<span class=\"string\">\"person\"</span>,<span class=\"keyword\">null</span>,values);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sqLiteDatabase.setTransactionSuccessful();</div><div class=\"line\">        sqLiteDatabase.endTransaction();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delPerson</span><span class=\"params\">(person person)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        sqLiteDatabase.delete(<span class=\"string\">\"person\"</span>,<span class=\"string\">\"age=?\"</span>,<span class=\"keyword\">new</span> String[]&#123;String.valueOf(person.age)&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"LitePal\"><a href=\"#LitePal\" class=\"headerlink\" title=\"LitePal\"></a>LitePal</h1><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射(ORM)的模式，并将我们平时开发时最常用到的一些数据库功能进行了封装，使得不用编写一行SQL语句就可以完成各种建表、増删改查的操作。</p>\n<h2 id=\"数据库的创建\"><a href=\"#数据库的创建\" class=\"headerlink\" title=\"数据库的创建\"></a>数据库的创建</h2><p>定义一个JavaBean类，该类每个字段都对应数据库表中的一个列。<br>如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Album</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>, defaultValue = <span class=\"string\">\"unknown\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> price;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] cover;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Song&gt; songs = <span class=\"keyword\">new</span> ArrayList&lt;Song&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">float</span> price)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.price = price;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getCover() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cover;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setCover</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] cover)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cover = cover;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Song&gt; <span class=\"title\">getSongs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> songs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Album <span class=\"title\">setSongs</span><span class=\"params\">(List&lt;Song&gt; songs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.songs = songs;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来我们还需要将该类添加到映射列表中(此处需要填写完整的路径以及名称)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">litepal</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dbname</span> <span class=\"attr\">value</span>=<span class=\"string\">\"BookStore\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dbname</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.shay.mydemo.litepal.Album\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.shay.mydemo.litepal.Song\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">litepal</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>值得注意的是还需要在Application中初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOwnApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnotherApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        LitePal.initialize(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到目前为止，我们就把所有工作都做完了。现在进行一次任意的数据库操作数据库就可以被创建出来了。但是问题来了，怎么看数据库有没有被创建好呢？这里介绍一个比较好用的工具<a href=\"https://github.com/amitshekhariitbhu/Android-Debug-Database\">Android-Debug-Database</a>，这个工具可以方便的在电脑上使用浏览器产看手机上的数据库以及sharedperfences。</p>\n<p>要使用这个项目，只需要添加以下依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">debugCompile &apos;com.amitshekhar.android:debug-db:+&apos;</div></pre></td></tr></table></figure></p>\n<p>然后开始运行软就可以开到类如下日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">D/DebugDB: Open http://XXX.XXX.X.XXX:8080 in your browser</div></pre></td></tr></table></figure></p>\n<p>打这个地址就可以看到数据库以及sharedperfences相关数据了。</p>\n<h2 id=\"数据库的升级\"><a href=\"#数据库的升级\" class=\"headerlink\" title=\"数据库的升级\"></a>数据库的升级</h2><p>使用SqliteOpenHelper的方式来升级数据库会把之前的表drop掉并新建一个表，这样会造成数据损失。虽然可以通过一系列操作避免数据的损失，但是这样的操作无疑是很繁琐的。通过使用litepal就可以很轻松的解决掉这个问题，使用litepal来生数据库非常简单，甚至完全不需要考虑任何逻辑。唯一需要做的就是想好你要怎么改，然后将数据库版本加1就可以了。数据完全不会丢失。</p>\n<h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><p>先回忆一下之前添加数据方法，我们需要将数据添加到ContentValues对象中，再通过调用SqliteDatabase的insert()方法实现。</p>\n<p>那么使用LitePal呢？我们只需传教出模型类的实例并将要存储的数据设置好，最后调用一下save()就可以了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = DataSupport.find(Album.class, <span class=\"number\">1</span>);</div><div class=\"line\">                Song song1 = <span class=\"keyword\">new</span> Song();</div><div class=\"line\">                song1.setName(String.valueOf(UUID.randomUUID()));</div><div class=\"line\">                song1.setDuration(<span class=\"number\">320</span>);</div><div class=\"line\">                song1.setAlbum(albumToUpdate);</div><div class=\"line\">                song1.save();</div><div class=\"line\">                Song song2 = <span class=\"keyword\">new</span> Song();</div><div class=\"line\">                song2.setName(String.valueOf(UUID.randomUUID()));</div><div class=\"line\">                song2.setDuration(<span class=\"number\">356</span>);</div><div class=\"line\">                song2.setAlbum(albumToUpdate);</div><div class=\"line\">                song2.save();</div></pre></td></tr></table></figure></p>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><ul>\n<li><p>通过save()方法更新数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = DataSupport.find(Album.class, <span class=\"number\">1</span>);</div><div class=\"line\">              albumToUpdate.setPrice(<span class=\"number\">201.99f</span>);</div><div class=\"line\">              albumToUpdate.save();</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过update()方法更新：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = <span class=\"keyword\">new</span> Album();</div><div class=\"line\">          albumToUpdate.setPrice(<span class=\"number\">20.99f</span>);</div><div class=\"line\">          albumToUpdate.update(id);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过updataAll()方法更新：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Album albumToUpdate = <span class=\"keyword\">new</span> Album();</div><div class=\"line\">      albumToUpdate.setPrice(<span class=\"number\">20.99f</span>);</div><div class=\"line\">      albumToUpdate.updateAll(<span class=\"string\">\"name = ?\"</span>, <span class=\"string\">\"album\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><ul>\n<li><p>通过delete()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataSupport.delete(Song.class, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过deleteAll()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataSupport.deleteAll(Song.class, <span class=\"string\">\"duration &gt; ?\"</span> , <span class=\"string\">\"350\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><p>使用Litepal查询数据非常简单，只需要这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.findAll(Song.class);</div></pre></td></tr></table></figure></p>\n<p>这样就把Song表的所有数据查出来了，而且结果已经放到了一个集合里面，不再需要使用Cursor一一取值了。<br>除了findall()之外，litePal还提供了跟多其他方法来满足我们的需求，如：</p>\n<ul>\n<li><p>查询第一条数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Song fristsong=DataSupport.findFirst(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询最后一条数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Song fristsong=DataSupport.findLast(Song.class);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们还可以通过连缀查询来定制更多的功能来实现自己的需求</p>\n<ul>\n<li><p>select()查寻特定关键字的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.select(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"price\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>where()条件查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.where(<span class=\"string\">\"prcie&gt;?\"</span>,<span class=\"string\">\"15\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>order()用于指定结果的排序方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.order(<span class=\"string\">\"price desc\"</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>limit()用于指定查询结果的数量，如查寻3条数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.limit(<span class=\"number\">3</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>offset()用于指定查询结果的偏移量，如查询第二三四条数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.limit(<span class=\"number\">3</span>).offset(<span class=\"number\">1</span>).find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连缀组合示例,查询第十一至二十条数据中价格大于10的name和price这两列数据，并将查选结果按照价格排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Song&gt; allSongs = DataSupport.select(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"price\"</span>)</div><div class=\"line\">                       .where(<span class=\"string\">\"price &gt; ?\"</span>,<span class=\"string\">\"10\"</span>)</div><div class=\"line\">                       .order(<span class=\"string\">\"price\"</span>)</div><div class=\"line\">                       .limit(<span class=\"number\">10</span>)</div><div class=\"line\">                       .offset(<span class=\"number\">10</span>)</div><div class=\"line\">                       .find(Song.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果这些都不能满足你，你还可以用DataSupport.findBySQL()方法来做。参数是sql语句，注意该方法返回的是一个Cursor对象</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj71ziznp0000jedz535xor2d","category_id":"cj71zizo40002jedz3j2nhuar","_id":"cj71zizoq000ajedzvah3z3yz"},{"post_id":"cj71ziznu0001jedzbdiqyu96","category_id":"cj71zizok0007jedz323akmqh","_id":"cj71zizp1000fjedz1u2hy2we"},{"post_id":"cj71zizoy000ejedz04rxyuj6","category_id":"cj71zizo40002jedz3j2nhuar","_id":"cj71zizp4000jjedzg64hy7vw"},{"post_id":"cj71zizo70004jedz1es5x32j","category_id":"cj71zizo40002jedz3j2nhuar","_id":"cj71zizp4000mjedz5mw08k7k"},{"post_id":"cj71zizoa0005jedzj2u28x7j","category_id":"cj71zizp2000gjedzpbyd7wyd","_id":"cj71zizp5000pjedz9ud42ik7"},{"post_id":"cj71zizol0009jedz4omycn9e","category_id":"cj71zizp2000gjedzpbyd7wyd","_id":"cj71zizpb000wjedzergl5mm7"},{"post_id":"cj71zizor000bjedzo3u0euoe","category_id":"cj71zizp2000gjedzpbyd7wyd","_id":"cj71zizpe0010jedzvzzj5h7f"},{"post_id":"cj71zizoi0006jedzwnusmhsu","category_id":"cj71zizp4000ljedzu2be3tjq","_id":"cj71zizpg0013jedzefs7t918"},{"post_id":"cj71zizoi0006jedzwnusmhsu","category_id":"cj71zizpc000xjedz0n5qtk5p","_id":"cj71zizpg0015jedzj63isfva"}],"PostTag":[{"post_id":"cj71ziznp0000jedz535xor2d","tag_id":"cj71zizo60003jedzlriva6fm","_id":"cj71zizp4000ijedz39yeggi8"},{"post_id":"cj71ziznp0000jedz535xor2d","tag_id":"cj71zizok0008jedz21sj85v9","_id":"cj71zizp4000kjedzmxxk2tj4"},{"post_id":"cj71ziznp0000jedz535xor2d","tag_id":"cj71zizou000djedzhy5effb2","_id":"cj71zizp5000ojedze32why45"},{"post_id":"cj71ziznu0001jedzbdiqyu96","tag_id":"cj71zizp3000hjedzxy647om7","_id":"cj71zizp5000qjedzje6ze2ov"},{"post_id":"cj71zizo70004jedz1es5x32j","tag_id":"cj71zizp4000njedzv0bv31dv","_id":"cj71zizpb000vjedzow91v7zr"},{"post_id":"cj71zizo70004jedz1es5x32j","tag_id":"cj71zizp8000sjedzxaald8c5","_id":"cj71zizpd000yjedzf7m0r9mq"},{"post_id":"cj71zizoa0005jedzj2u28x7j","tag_id":"cj71zizpa000ujedz0r954dz0","_id":"cj71zizpf0012jedz0cpz9o4j"},{"post_id":"cj71zizoa0005jedzj2u28x7j","tag_id":"cj71zizpe000zjedzill11t0l","_id":"cj71zizpg0014jedzwg9kjtgl"},{"post_id":"cj71zizoi0006jedzwnusmhsu","tag_id":"cj71zizpf0011jedzsvktmnk5","_id":"cj71zizpj0018jedzc4f607xe"},{"post_id":"cj71zizoi0006jedzwnusmhsu","tag_id":"cj71zizpg0016jedzz4bogykn","_id":"cj71zizpj0019jedze9yq08y4"},{"post_id":"cj71zizol0009jedz4omycn9e","tag_id":"cj71zizpi0017jedzimyjdira","_id":"cj71zizpm001djedzyimxn7l4"},{"post_id":"cj71zizol0009jedz4omycn9e","tag_id":"cj71zizpj001ajedzd7m7pn1h","_id":"cj71zizpm001ejedzv69uwow4"},{"post_id":"cj71zizol0009jedz4omycn9e","tag_id":"cj71zizpa000ujedz0r954dz0","_id":"cj71zizpn001gjedzvvem81fj"},{"post_id":"cj71zizor000bjedzo3u0euoe","tag_id":"cj71zizpa000ujedz0r954dz0","_id":"cj71zizpq001kjedz024h67bc"},{"post_id":"cj71zizor000bjedzo3u0euoe","tag_id":"cj71zizpn001fjedzcozhwr4m","_id":"cj71zizpr001ljedzktwwdcmb"},{"post_id":"cj71zizor000bjedzo3u0euoe","tag_id":"cj71zizpj001ajedzd7m7pn1h","_id":"cj71zizpr001njedzd98onil8"},{"post_id":"cj71zizor000bjedzo3u0euoe","tag_id":"cj71zizpo001ijedzdre7x6af","_id":"cj71zizpr001ojedz0jlq7vxa"},{"post_id":"cj71zizoy000ejedz04rxyuj6","tag_id":"cj71zizpq001jjedzq98cvnwo","_id":"cj71zizpt001qjedzxmx8lneg"},{"post_id":"cj71zizoy000ejedz04rxyuj6","tag_id":"cj71zizpr001mjedzrpswirnh","_id":"cj71zizpu001rjedzne4rxlvp"},{"post_id":"cj71zizoy000ejedz04rxyuj6","tag_id":"cj71zizpr001pjedz8hkusbv3","_id":"cj71zizpu001sjedz9hc46p5b"}],"Tag":[{"name":"Android","_id":"cj71zizo60003jedzlriva6fm"},{"name":"Activity","_id":"cj71zizok0008jedz21sj85v9"},{"name":"启动模式","_id":"cj71zizou000djedzhy5effb2"},{"name":"Hexo","_id":"cj71zizp3000hjedzxy647om7"},{"name":"广播机制","_id":"cj71zizp4000njedzv0bv31dv"},{"name":"动态监听","_id":"cj71zizp8000sjedzxaald8c5"},{"name":"linux","_id":"cj71zizpa000ujedz0r954dz0"},{"name":"ubuntu","_id":"cj71zizpe000zjedzill11t0l"},{"name":"RxJava","_id":"cj71zizpf0011jedzsvktmnk5"},{"name":"Retrofit","_id":"cj71zizpg0016jedzz4bogykn"},{"name":"lnmp","_id":"cj71zizpi0017jedzimyjdira"},{"name":"php","_id":"cj71zizpj001ajedzd7m7pn1h"},{"name":"lanmp","_id":"cj71zizpn001fjedzcozhwr4m"},{"name":"mysql","_id":"cj71zizpo001ijedzdre7x6af"},{"name":"Sharedpreferences","_id":"cj71zizpq001jjedzq98cvnwo"},{"name":"Sqlite","_id":"cj71zizpr001mjedzrpswirnh"},{"name":"LitePal","_id":"cj71zizpr001pjedz8hkusbv3"}]}}